{"version":3,"sources":["../../src/index.js","../../src/js/convert.js","../../src/js/common.js","../../src/js/resolve.js","../../src/js/css-calc.js","../../src/js/constant.js","../../src/js/css-var.js","../../src/js/relative-color.js","../../src/js/util.js","../../src/js/color.js"],"sourcesContent":["/*!\n * CSS color - Resolve, parse, convert CSS color.\n * @license MIT\n * @copyright asamuzaK (Kazz)\n * @see {@link https://github.com/asamuzaK/cssColor/blob/main/LICENSE}\n */\n\nexport { convert } from './js/convert.js';\nexport { cssCalc } from './js/css-calc.js';\nexport { resolve } from './js/resolve.js';\nexport { isColor } from './js/util.js';\n","/**\n * convert.js\n */\n\nimport { LRUCache } from 'lru-cache';\nimport {\n  convertColorToHsl, convertColorToHwb, convertColorToLab, convertColorToLch,\n  convertColorToOklab, convertColorToOklch, convertColorToRgb,\n  numberToHexString, parseColorFunc, parseColorValue\n} from './color.js';\nimport { isString } from './common.js';\nimport { cssCalc } from './css-calc.js';\nimport { cssVar } from './css-var.js';\nimport { resolveRelativeColor } from './relative-color.js';\nimport { resolve } from './resolve.js';\nimport { valueToJsonString } from './util.js';\n\n/* constants */\nimport {\n  SYN_FN_MATH_CALC, SYN_FN_REL, SYN_FN_VAR, VAL_COMP\n} from './constant.js';\n\n/* regexp */\nconst REG_FN_MATH_CALC = new RegExp(SYN_FN_MATH_CALC);\nconst REG_FN_REL = new RegExp(SYN_FN_REL);\nconst REG_FN_VAR = new RegExp(SYN_FN_VAR);\n\n/* cached results */\nexport const cachedResults = new LRUCache({\n  max: 4096\n});\n\n/**\n * pre process\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {object} [opt.customProperty] - custom properties\n * @param {object} [opt.dimension] - dimension\n * @returns {?string} - value\n */\nexport const preProcess = (value, opt = {}) => {\n  if (isString(value)) {\n    value = value.trim();\n    if (!value) {\n      return null;\n    }\n  } else {\n    return null;\n  }\n  const { customProperty } = opt;\n  let cacheKey;\n  if (typeof customProperty?.callback !== 'function') {\n    cacheKey = `{preProcess:${value},opt:${valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  if (REG_FN_VAR.test(value)) {\n    value = cssVar(value, opt);\n    if (!value) {\n      if (cacheKey) {\n        cachedResults.set(cacheKey, null);\n      }\n      return null;\n    }\n  }\n  if (REG_FN_REL.test(value)) {\n    value = resolveRelativeColor(value, opt);\n  } else if (REG_FN_MATH_CALC.test(value)) {\n    value = cssCalc(value, opt);\n  }\n  if (value && value.startsWith('color-mix')) {\n    value = resolve(value, {\n      format: VAL_COMP\n    });\n  }\n  if (cacheKey) {\n    cachedResults.set(cacheKey, value);\n  }\n  return value;\n};\n\n/**\n * convert number to hex string\n * @param {number} value - color value\n * @returns {string} - hex string: 00..ff\n */\nexport const numberToHex = value => {\n  const cacheKey = typeof value === 'number' && `{numberToHex:${value}}`;\n  if (cacheKey && cachedResults.has(cacheKey)) {\n    return cachedResults.get(cacheKey);\n  }\n  const hex = numberToHexString(value);\n  if (cacheKey) {\n    cachedResults.set(cacheKey, hex);\n  }\n  return hex;\n};\n\n/**\n * convert color to hex\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {boolean} [opt.alpha] - return in #rrggbbaa notation\n * @param {object} [opt.customProperty] - custom properties\n * @param {object} [opt.dimension] - dimension\n * @returns {?string} - #rrggbb | #rrggbbaa | null\n */\nexport const colorToHex = (value, opt = {}) => {\n  if (isString(value)) {\n    value = preProcess(value, opt);\n    if (value) {\n      value = value.toLowerCase();\n    } else {\n      return null;\n    }\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { alpha, customProperty } = opt;\n  let cacheKey;\n  if (typeof customProperty?.callback !== 'function') {\n    cacheKey = `{colorToHex:${value},opt:${valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  let hex;\n  if (alpha) {\n    opt.format = 'hexAlpha';\n    hex = resolve(value, opt);\n  } else {\n    opt.format = 'hex';\n    hex = resolve(value, opt);\n  }\n  if (cacheKey) {\n    cachedResults.set(cacheKey, hex);\n  }\n  return hex;\n};\n\n/**\n * convert color to hsl\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {object} [opt.customProperty] - custom properties\n * @param {object} [opt.dimension] - dimension\n * @returns {Array.<number>} - [h, s, l, alpha]\n */\nexport const colorToHsl = (value, opt = {}) => {\n  if (isString(value)) {\n    value = preProcess(value, opt);\n    if (value) {\n      value = value.toLowerCase();\n    } else {\n      return [0, 0, 0, 0];\n    }\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { customProperty } = opt;\n  let cacheKey;\n  if (typeof customProperty?.callback !== 'function') {\n    cacheKey = `{colorToHsl:${value},opt:${valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  opt.format = 'hsl';\n  const hsl = convertColorToHsl(value, opt);\n  if (cacheKey) {\n    cachedResults.set(cacheKey, hsl);\n  }\n  return hsl;\n};\n\n/**\n * convert color to hwb\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {object} [opt.customProperty] - custom properties\n * @param {object} [opt.dimension] - dimension\n * @returns {Array.<number>} - [h, w, b, alpha]\n */\nexport const colorToHwb = (value, opt = {}) => {\n  if (isString(value)) {\n    value = preProcess(value, opt);\n    if (value) {\n      value = value.toLowerCase();\n    } else {\n      return [0, 0, 0, 0];\n    }\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { customProperty } = opt;\n  let cacheKey;\n  if (typeof customProperty?.callback !== 'function') {\n    cacheKey = `{colorToHwb:${value},opt:${valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  opt.format = 'hwb';\n  const hwb = convertColorToHwb(value, opt);\n  cachedResults.set(cacheKey, hwb);\n  return hwb;\n};\n\n/**\n * convert color to lab\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {object} [opt.customProperty] - custom properties\n * @param {object} [opt.dimension] - dimension\n * @returns {Array.<number>} - [l, a, b, alpha]\n */\nexport const colorToLab = (value, opt = {}) => {\n  if (isString(value)) {\n    value = preProcess(value, opt);\n    if (value) {\n      value = value.toLowerCase();\n    } else {\n      return [0, 0, 0, 0];\n    }\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { customProperty } = opt;\n  let cacheKey;\n  if (typeof customProperty?.callback !== 'function') {\n    cacheKey = `{colorToLab:${value},opt:${valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  const lab = convertColorToLab(value, opt);\n  if (cacheKey) {\n    cachedResults.set(cacheKey, lab);\n  }\n  return lab;\n};\n\n/**\n * convert color to lch\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {object} [opt.customProperty] - custom properties\n * @param {object} [opt.dimension] - dimension\n * @returns {Array.<number>} - [l, c, h, alpha]\n */\nexport const colorToLch = (value, opt = {}) => {\n  if (isString(value)) {\n    value = preProcess(value, opt);\n    if (value) {\n      value = value.toLowerCase();\n    } else {\n      return [0, 0, 0, 0];\n    }\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { customProperty } = opt;\n  let cacheKey;\n  if (typeof customProperty?.callback !== 'function') {\n    cacheKey = `{colorToLch:${value},opt:${valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  const lch = convertColorToLch(value, opt);\n  if (cacheKey) {\n    cachedResults.set(cacheKey, lch);\n  }\n  return lch;\n};\n\n/**\n * convert color to oklab\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {object} [opt.customProperty] - custom properties\n * @param {object} [opt.dimension] - dimension\n * @returns {Array.<number>} - [l, a, b, alpha]\n */\nexport const colorToOklab = (value, opt = {}) => {\n  if (isString(value)) {\n    value = preProcess(value, opt);\n    if (value) {\n      value = value.toLowerCase();\n    } else {\n      return [0, 0, 0, 0];\n    }\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { customProperty } = opt;\n  let cacheKey;\n  if (typeof customProperty?.callback !== 'function') {\n    cacheKey = `{colorToOklab:${value},opt:${valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  const lab = convertColorToOklab(value, opt);\n  if (cacheKey) {\n    cachedResults.set(cacheKey, lab);\n  }\n  return lab;\n};\n\n/**\n * convert color to oklch\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {object} [opt.customProperty] - custom properties\n * @param {object} [opt.dimension] - dimension\n * @returns {Array.<number>} - [l, c, h, alpha]\n */\nexport const colorToOklch = (value, opt = {}) => {\n  if (isString(value)) {\n    value = preProcess(value, opt);\n    if (value) {\n      value = value.toLowerCase();\n    } else {\n      return [0, 0, 0, 0];\n    }\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { customProperty } = opt;\n  let cacheKey;\n  if (typeof customProperty?.callback !== 'function') {\n    cacheKey = `{colorToOklch:${value},opt:${valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  const lch = convertColorToOklch(value, opt);\n  if (cacheKey) {\n    cachedResults.set(cacheKey, lch);\n  }\n  return lch;\n};\n\n/**\n * convert color to rgb\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {object} [opt.customProperty] - custom properties\n * @param {object} [opt.dimension] - dimension\n * @returns {Array.<number>} - [r, g, b, alpha]\n */\nexport const colorToRgb = (value, opt = {}) => {\n  if (isString(value)) {\n    value = preProcess(value, opt);\n    if (value) {\n      value = value.toLowerCase();\n    } else {\n      return [0, 0, 0, 0];\n    }\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { customProperty } = opt;\n  let cacheKey;\n  if (typeof customProperty?.callback !== 'function') {\n    cacheKey = `{colorToRgb:${value},opt:${valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  const rgb = convertColorToRgb(value, opt);\n  if (cacheKey) {\n    cachedResults.set(cacheKey, rgb);\n  }\n  return rgb;\n};\n\n/**\n * convert color to xyz\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {object} [opt.customProperty] - custom properties\n * @param {object} [opt.d50] - white poin in d50\n * @param {object} [opt.dimension] - dimension\n * @returns {Array.<number>} - [x, y, z, alpha]\n */\nexport const colorToXyz = (value, opt = {}) => {\n  if (isString(value)) {\n    value = preProcess(value, opt);\n    if (value) {\n      value = value.toLowerCase();\n    } else {\n      return [0, 0, 0, 0];\n    }\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { customProperty } = opt;\n  let cacheKey;\n  if (typeof customProperty?.callback !== 'function') {\n    cacheKey = `{colorToXyz:${value},opt:${valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  let xyz;\n  if (value.startsWith('color(')) {\n    [, ...xyz] = parseColorFunc(value, opt);\n  } else {\n    [, ...xyz] = parseColorValue(value, opt);\n  }\n  if (cacheKey) {\n    cachedResults.set(cacheKey, xyz);\n  }\n  return xyz;\n};\n\n/**\n * convert color to xyz-d50\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {object} [opt.customProperty] - custom properties\n * @param {object} [opt.dimension] - dimension\n * @returns {Array.<number>} - [x, y, z, alpha]\n */\nexport const colorToXyzD50 = (value, opt = {}) => {\n  opt.d50 = true;\n  return colorToXyz(value, opt);\n};\n\n/* convert */\nexport const convert = {\n  colorToHex,\n  colorToHsl,\n  colorToHwb,\n  colorToLab,\n  colorToLch,\n  colorToOklab,\n  colorToOklch,\n  colorToRgb,\n  colorToXyz,\n  colorToXyzD50,\n  numberToHex\n};\n","/**\r\n * common.js\r\n */\r\n\r\n/* constants */\r\nconst TYPE_FROM = 8;\r\nconst TYPE_TO = -1;\r\n\r\n/**\r\n * get type\r\n * @param {*} o - object to check\r\n * @returns {string} - type of object\r\n */\r\nexport const getType = o =>\r\n  Object.prototype.toString.call(o).slice(TYPE_FROM, TYPE_TO);\r\n\r\n/**\r\n * is string\r\n * @param {*} o - object to check\r\n * @returns {boolean} - result\r\n */\r\nexport const isString = o => typeof o === 'string' || o instanceof String;\r\n","/**\n * resolve.js\n */\n\nimport { LRUCache } from 'lru-cache';\nimport {\n  convertRgbToHex, resolveColorFunc, resolveColorMix, resolveColorValue\n} from './color.js';\nimport { isString } from './common.js';\nimport { cssCalc } from './css-calc.js';\nimport { cssVar } from './css-var.js';\nimport { resolveRelativeColor } from './relative-color.js';\nimport { valueToJsonString } from './util.js';\n\n/* constants */\nimport {\n  FN_COLOR, FN_MIX, SYN_FN_MATH_CALC, SYN_FN_REL, SYN_FN_VAR, VAL_COMP, VAL_SPEC\n} from './constant.js';\nconst RGB_TRANSPARENT = 'rgba(0, 0, 0, 0)';\n\n/* regexp */\nconst REG_FN_MATH_CALC = new RegExp(SYN_FN_MATH_CALC);\nconst REG_FN_REL = new RegExp(SYN_FN_REL);\nconst REG_FN_VAR = new RegExp(SYN_FN_VAR);\n\n/* cached results */\nexport const cachedResults = new LRUCache({\n  max: 4096\n});\n\n/**\n * resolve CSS color\n * @param {string} color - color value\n *   - system colors are not supported\n * @param {object} [opt] - options\n * @param {string} [opt.currentColor]\n *   - color to use for `currentcolor` keyword\n *   - if omitted, it will be treated as a missing color\n *     i.e. `rgb(none none none / none)`\n * @param {object} [opt.customProperty]\n *   - custom properties\n *   - pair of `--` prefixed property name and value,\n *     e.g. `customProperty: { '--some-color': '#0000ff' }`\n *   - and/or `callback` function to get the value of the custom property,\n *     e.g. `customProperty: { callback: someDeclaration.getPropertyValue }`\n * @param {object} [opt.dimension]\n *   - dimension, convert relative length to pixels\n *   - pair of unit and it's value as a number in pixels,\n *     e.g. `dimension: { em: 12, rem: 16, vw: 10.26 }`\n *   - and/or `callback` function to get the value as a number in pixels,\n *     e.g. `dimension: { callback: convertUnitToPixel }`\n * @param {string} [opt.format]\n *   - output format, one of below\n *   - `computedValue` (default), [computed value][139] of the color\n *   - `specifiedValue`, [specified value][140] of the color\n *   - `hex`, hex color notation, i.e. `rrggbb`\n *   - `hexAlpha`, hex color notation with alpha channel, i.e. `#rrggbbaa`\n * @param {*} [opt.key] - key e.g. CSS property `background-color`\n * @returns {?string|Array}\n *   - one of rgba?(), #rrggbb(aa)?, color-name, '(empty-string)',\n *     color(color-space r g b / alpha), color(color-space x y z / alpha),\n *     lab(l a b / alpha), lch(l c h / alpha), oklab(l a b / alpha),\n *     oklch(l c h / alpha), null or [key, rgba?()] etc. if `key` is specified\n *   - in `computedValue`, values are numbers, however `rgb()` values are\n *     integers\n *   - in `specifiedValue`, returns `empty string` for unknown and/or invalid\n *     color\n *   - in `hex`, returns `null` for `transparent`, and also returns `null` if\n *     any of `r`, `g`, `b`, `alpha` is not a number\n *   - in `hexAlpha`, returns `#00000000` for `transparent`,\n *     however returns `null` if any of `r`, `g`, `b`, `alpha` is not a number\n */\nexport const resolve = (color, opt = {}) => {\n  if (isString(color)) {\n    color = color.trim();\n  } else {\n    throw new TypeError(`${color} is not a string.`);\n  }\n  const { currentColor, customProperty, format = VAL_COMP, key } = opt;\n  let cacheKey;\n  if (!REG_FN_VAR.test(color) ||\n      typeof customProperty?.callback !== 'function') {\n    cacheKey = `{resolve:${color},opt:${valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  let res, cs, r, g, b, alpha;\n  if (REG_FN_VAR.test(color)) {\n    if (format === VAL_SPEC) {\n      if (cacheKey) {\n        cachedResults.set(cacheKey, color);\n      }\n      return color;\n    }\n    color = cssVar(color, opt);\n    if (!color) {\n      switch (format) {\n        case 'hex':\n        case 'hexAlpha': {\n          if (cacheKey) {\n            cachedResults.set(cacheKey, null);\n          }\n          return null;\n        }\n        default: {\n          res = RGB_TRANSPARENT;\n          if (cacheKey) {\n            cachedResults.set(cacheKey, res);\n          }\n          return res;\n        }\n      }\n    }\n  }\n  if (opt.format !== format) {\n    opt.format = format;\n  }\n  color = color.toLowerCase();\n  if (REG_FN_REL.test(color)) {\n    color = resolveRelativeColor(color, opt);\n    if (format === VAL_COMP) {\n      res = color || RGB_TRANSPARENT;\n      if (cacheKey) {\n        cachedResults.set(cacheKey, res);\n      }\n      return res;\n    }\n    if (format === VAL_SPEC) {\n      res = color || '';\n      if (cacheKey) {\n        cachedResults.set(cacheKey, res);\n      }\n      return res;\n    }\n    if (!color) {\n      color = '';\n    }\n  }\n  if (REG_FN_MATH_CALC.test(color)) {\n    color = cssCalc(color, opt);\n  }\n  if (color === 'transparent') {\n    switch (format) {\n      case VAL_SPEC: {\n        if (cacheKey) {\n          cachedResults.set(cacheKey, color);\n        }\n        return color;\n      }\n      case 'hex': {\n        if (cacheKey) {\n          cachedResults.set(cacheKey, null);\n        }\n        return null;\n      }\n      case 'hexAlpha': {\n        res = '#00000000';\n        if (cacheKey) {\n          cachedResults.set(cacheKey, res);\n        }\n        return res;\n      }\n      case VAL_COMP:\n      default: {\n        res = RGB_TRANSPARENT;\n        if (cacheKey) {\n          cachedResults.set(cacheKey, res);\n        }\n        return res;\n      }\n    }\n  } else if (color === 'currentcolor') {\n    if (format === VAL_SPEC) {\n      if (cacheKey) {\n        cachedResults.set(cacheKey, color);\n      }\n      return color;\n    }\n    if (currentColor) {\n      if (currentColor.startsWith(FN_MIX)) {\n        [cs, r, g, b, alpha] = resolveColorMix(currentColor, opt);\n      } else if (currentColor.startsWith(FN_COLOR)) {\n        [cs, r, g, b, alpha] = resolveColorFunc(currentColor, opt);\n      } else {\n        [cs, r, g, b, alpha] = resolveColorValue(currentColor, opt);\n      }\n    } else if (format === VAL_COMP) {\n      res = RGB_TRANSPARENT;\n      if (cacheKey) {\n        cachedResults.set(cacheKey, res);\n      }\n      return res;\n    }\n  } else if (format === VAL_SPEC) {\n    if (color.startsWith(FN_MIX)) {\n      res = resolveColorMix(color, opt);\n      if (cacheKey) {\n        cachedResults.set(cacheKey, res);\n      }\n      return res;\n    } else if (color.startsWith(FN_COLOR)) {\n      [cs, r, g, b, alpha] = resolveColorFunc(color, opt);\n      if (alpha === 1) {\n        res = `color(${cs} ${r} ${g} ${b})`;\n      } else {\n        res = `color(${cs} ${r} ${g} ${b} / ${alpha})`;\n      }\n      if (cacheKey) {\n        cachedResults.set(cacheKey, res);\n      }\n      return res;\n    } else {\n      const rgb = resolveColorValue(color, opt);\n      if (!rgb) {\n        res = '';\n        if (cacheKey) {\n          cachedResults.set(cacheKey, res);\n        }\n        return res;\n      }\n      [cs, r, g, b, alpha] = rgb;\n      if (cs === 'rgb') {\n        if (alpha === 1) {\n          res = `${cs}(${r}, ${g}, ${b})`;\n        } else {\n          res = `${cs}a(${r}, ${g}, ${b}, ${alpha})`;\n        }\n        if (cacheKey) {\n          cachedResults.set(cacheKey, res);\n        }\n        return res;\n      }\n      if (alpha === 1) {\n        res = `${cs}(${r} ${g} ${b})`;\n      } else {\n        res = `${cs}(${r} ${g} ${b} / ${alpha})`;\n      }\n      if (cacheKey) {\n        cachedResults.set(cacheKey, res);\n      }\n      return res;\n    }\n  } else if (/currentcolor/.test(color)) {\n    if (currentColor) {\n      color = color.replace(/currentcolor/g, currentColor);\n    }\n    if (/transparent/.test(color)) {\n      color = color.replace(/transparent/g, RGB_TRANSPARENT);\n    }\n    if (color.startsWith(FN_MIX)) {\n      [cs, r, g, b, alpha] = resolveColorMix(color, opt);\n    }\n  } else if (/transparent/.test(color)) {\n    color = color.replace(/transparent/g, RGB_TRANSPARENT);\n    if (color.startsWith(FN_MIX)) {\n      [cs, r, g, b, alpha] = resolveColorMix(color, opt);\n    }\n  } else if (color.startsWith(FN_MIX)) {\n    [cs, r, g, b, alpha] = resolveColorMix(color, opt);\n  } else if (color.startsWith(FN_COLOR)) {\n    [cs, r, g, b, alpha] = resolveColorFunc(color, opt);\n  } else if (color) {\n    [cs, r, g, b, alpha] = resolveColorValue(color, opt);\n  }\n  switch (format) {\n    case 'hex': {\n      let hex;\n      if (isNaN(r) || isNaN(g) || isNaN(b) || isNaN(alpha) || alpha === 0) {\n        hex = null;\n      } else {\n        hex = convertRgbToHex([r, g, b]);\n      }\n      if (key) {\n        res = [key, hex];\n      } else {\n        res = hex;\n      }\n      break;\n    }\n    case 'hexAlpha': {\n      let hex;\n      if (isNaN(r) || isNaN(g) || isNaN(b) || isNaN(alpha)) {\n        hex = null;\n      } else {\n        hex = convertRgbToHex([r, g, b, alpha]);\n      }\n      if (key) {\n        res = [key, hex];\n      } else {\n        res = hex;\n      }\n      break;\n    }\n    case VAL_COMP:\n    default: {\n      let value;\n      switch (cs) {\n        case 'rgb': {\n          if (alpha === 1) {\n            value = `${cs}(${r}, ${g}, ${b})`;\n          } else {\n            value = `${cs}a(${r}, ${g}, ${b}, ${alpha})`;\n          }\n          break;\n        }\n        case 'lab':\n        case 'lch':\n        case 'oklab':\n        case 'oklch': {\n          if (alpha === 1) {\n            value = `${cs}(${r} ${g} ${b})`;\n          } else {\n            value = `${cs}(${r} ${g} ${b} / ${alpha})`;\n          }\n          break;\n        }\n        // color()\n        default: {\n          if (alpha === 1) {\n            value = `color(${cs} ${r} ${g} ${b})`;\n          } else {\n            value = `color(${cs} ${r} ${g} ${b} / ${alpha})`;\n          }\n        }\n      }\n      if (key) {\n        res = [key, value];\n      } else {\n        res = value;\n      }\n    }\n  }\n  if (cacheKey) {\n    cachedResults.set(cacheKey, res);\n  }\n  return res;\n};\n","/**\n * css-calc.js\n */\n\nimport { calc } from '@csstools/css-calc';\nimport { TokenType, tokenize } from '@csstools/css-tokenizer';\nimport { LRUCache } from 'lru-cache';\nimport { isString } from './common.js';\nimport { roundToPrecision, valueToJsonString } from './util.js';\n\n/* constants */\nimport {\n  FN_VAR, NUM, SYN_FN_MATH, SYN_FN_MATH_CALC, SYN_FN_MATH_VAR, SYN_FN_VAR,\n  VAL_SPEC\n} from './constant.js';\nconst {\n  CloseParen: PAREN_CLOSE, Comment: COMMENT, Dimension: DIM, EOF,\n  Function: FUNC, OpenParen: PAREN_OPEN, Whitespace: W_SPACE\n} = TokenType;\nconst HEX = 16;\nconst MAX_PCT = 100;\n\n/* regexp */\nconst REG_FN_MATH_CALC = new RegExp(SYN_FN_MATH_CALC);\nconst REG_FN_VAR = new RegExp(SYN_FN_VAR);\nconst REG_OPERATOR = /\\s[*+/-]\\s/;\nconst REG_START_MATH = new RegExp(SYN_FN_MATH);\nconst REG_START_MATH_VAR = new RegExp(SYN_FN_MATH_VAR);\nconst REG_TYPE_DIM = new RegExp(`^(${NUM})([a-z]+)$`);\nconst REG_TYPE_DIM_PCT = new RegExp(`^(${NUM})([a-z]+|%)$`);\nconst REG_TYPE_PCT = new RegExp(`^(${NUM})%$`);\n\n/* cached results */\nexport const cachedResults = new LRUCache({\n  max: 4096\n});\n\n/**\n * calclator\n */\nexport class Calculator {\n  /* private */\n  // number\n  #hasNum;\n  #numSum;\n  #numMul;\n  // percentage\n  #hasPct;\n  #pctSum;\n  #pctMul;\n  // dimension\n  #hasDim;\n  #dimSum;\n  #dimSub;\n  #dimMul;\n  #dimDiv;\n  // et cetra\n  #hasEtc;\n  #etcSum;\n  #etcSub;\n  #etcMul;\n  #etcDiv;\n\n  /**\n   * constructor\n   */\n  constructor() {\n    // number\n    this.#hasNum = false;\n    this.#numSum = [];\n    this.#numMul = [];\n    // percentage\n    this.#hasPct = false;\n    this.#pctSum = [];\n    this.#pctMul = [];\n    // dimension\n    this.#hasDim = false;\n    this.#dimSum = [];\n    this.#dimSub = [];\n    this.#dimMul = [];\n    this.#dimDiv = [];\n    // et cetra\n    this.#hasEtc = false;\n    this.#etcSum = [];\n    this.#etcSub = [];\n    this.#etcMul = [];\n    this.#etcDiv = [];\n  }\n\n  get hasNum() {\n    return this.#hasNum;\n  }\n\n  set hasNum(value) {\n    this.#hasNum = !!value;\n  }\n\n  get numSum() {\n    return this.#numSum;\n  }\n\n  get numMul() {\n    return this.#numMul;\n  }\n\n  get hasPct() {\n    return this.#hasPct;\n  }\n\n  set hasPct(value) {\n    this.#hasPct = !!value;\n  }\n\n  get pctSum() {\n    return this.#pctSum;\n  }\n\n  get pctMul() {\n    return this.#pctMul;\n  }\n\n  get hasDim() {\n    return this.#hasDim;\n  }\n\n  set hasDim(value) {\n    this.#hasDim = !!value;\n  }\n\n  get dimSum() {\n    return this.#dimSum;\n  }\n\n  get dimSub() {\n    return this.#dimSub;\n  }\n\n  get dimMul() {\n    return this.#dimMul;\n  }\n\n  get dimDiv() {\n    return this.#dimDiv;\n  }\n\n  get hasEtc() {\n    return this.#hasEtc;\n  }\n\n  set hasEtc(value) {\n    this.#hasEtc = !!value;\n  }\n\n  get etcSum() {\n    return this.#etcSum;\n  }\n\n  get etcSub() {\n    return this.#etcSub;\n  }\n\n  get etcMul() {\n    return this.#etcMul;\n  }\n\n  get etcDiv() {\n    return this.#etcDiv;\n  }\n\n  /**\n   * clear values\n   * @returns {void}\n   */\n  clear() {\n    // number\n    this.#hasNum = false;\n    this.#numSum = [];\n    this.#numMul = [];\n    // percentage\n    this.#hasPct = false;\n    this.#pctSum = [];\n    this.#pctMul = [];\n    // dimension\n    this.#hasDim = false;\n    this.#dimSum = [];\n    this.#dimSub = [];\n    this.#dimMul = [];\n    this.#dimDiv = [];\n    // et cetra\n    this.#hasEtc = false;\n    this.#etcSum = [];\n    this.#etcSub = [];\n    this.#etcMul = [];\n    this.#etcDiv = [];\n  }\n\n  /**\n   * sort values\n   * @param {Array} values - values\n   * @returns {Array} - sorted values\n   */\n  sort(values = []) {\n    const arr = [...values];\n    if (arr.length > 1) {\n      arr.sort((a, b) => {\n        let res;\n        if (REG_TYPE_DIM_PCT.test(a) && REG_TYPE_DIM_PCT.test(b)) {\n          const [, valA, unitA] = REG_TYPE_DIM_PCT.exec(a);\n          const [, valB, unitB] = REG_TYPE_DIM_PCT.exec(b);\n          if (unitA === unitB) {\n            if (Number(valA) === Number(valB)) {\n              res = 0;\n            } else if (Number(valA) > Number(valB)) {\n              res = 1;\n            } else {\n              res = -1;\n            }\n          } else if (unitA > unitB) {\n            res = 1;\n          } else {\n            res = -1;\n          }\n        } else {\n          if (a === b) {\n            res = 0;\n          } else if (a > b) {\n            res = 1;\n          } else {\n            res = -1;\n          }\n        }\n        return res;\n      });\n    }\n    return arr;\n  }\n\n  /**\n   * multiply values\n   * @returns {?string} - resolved value\n   */\n  multiply() {\n    const value = [];\n    let num;\n    if (this.#hasNum) {\n      num = 1;\n      for (const i of this.#numMul) {\n        num *= i;\n        if (num === 0 || !Number.isFinite(num) || Number.isNaN(num)) {\n          break;\n        }\n      }\n      if (!this.#hasPct && !this.#hasDim && !this.hasEtc) {\n        value.push(num);\n      }\n    }\n    if (this.#hasPct) {\n      if (!this.#hasNum) {\n        num = 1;\n      }\n      for (const i of this.#pctMul) {\n        num *= i;\n        if (num === 0 || !Number.isFinite(num) || Number.isNaN(num)) {\n          break;\n        }\n      }\n      if (Number.isFinite(num)) {\n        num = `${num}%`;\n      }\n      if (!this.#hasDim && !this.hasEtc) {\n        value.push(num);\n      }\n    }\n    if (this.#hasDim) {\n      let dim, mul, div;\n      if (this.#dimMul.length) {\n        if (this.#dimMul.length === 1) {\n          [mul] = this.#dimMul;\n        } else {\n          mul = `${this.sort(this.#dimMul).join(' * ')}`;\n        }\n      }\n      if (this.#dimDiv.length) {\n        if (this.#dimDiv.length === 1) {\n          [div] = this.#dimDiv;\n        } else {\n          div = `${this.sort(this.#dimDiv).join(' * ')}`;\n        }\n      }\n      if (Number.isFinite(num)) {\n        if (mul) {\n          if (div) {\n            if (div.includes('*')) {\n              dim = calc(`calc(${num} * ${mul} / (${div}))`, {\n                toCanonicalUnits: true\n              });\n            } else {\n              dim = calc(`calc(${num} * ${mul} / ${div})`, {\n                toCanonicalUnits: true\n              });\n            }\n          } else {\n            dim = calc(`calc(${num} * ${mul})`, {\n              toCanonicalUnits: true\n            });\n          }\n        } else {\n          if (div.includes('*')) {\n            dim = calc(`calc(${num} / (${div}))`, {\n              toCanonicalUnits: true\n            });\n          } else {\n            dim = calc(`calc(${num} / ${div})`, {\n              toCanonicalUnits: true\n            });\n          }\n        }\n        value.push(dim.replace(/^calc/, ''));\n      } else {\n        if (!value.length && num !== undefined) {\n          value.push(num);\n        }\n        if (mul) {\n          if (div) {\n            if (div.includes('*')) {\n              dim = calc(`calc(${mul} / (${div}))`, {\n                toCanonicalUnits: true\n              });\n            } else {\n              dim = calc(`calc(${mul} / ${div})`, {\n                toCanonicalUnits: true\n              });\n            }\n          } else {\n            dim = calc(`calc(${mul})`, {\n              toCanonicalUnits: true\n            });\n          }\n          if (value.length) {\n            value.push('*', dim.replace(/^calc/, ''));\n          } else {\n            value.push(dim.replace(/^calc/, ''));\n          }\n        } else {\n          dim = calc(`calc(${div})`, {\n            toCanonicalUnits: true\n          });\n          if (value.length) {\n            value.push('/', dim.replace(/^calc/, ''));\n          } else {\n            value.push('1', '/', dim.replace(/^calc/, ''));\n          }\n        }\n      }\n    }\n    if (this.#hasEtc) {\n      if (this.#etcMul.length) {\n        if (!value.length && num !== undefined) {\n          value.push(num);\n        }\n        const mul = this.sort(this.#etcMul).join(' * ');\n        if (value.length) {\n          value.push(`* ${mul}`);\n        } else {\n          value.push(`${mul}`);\n        }\n      }\n      if (this.#etcDiv.length) {\n        const div = this.sort(this.#etcDiv).join(' * ');\n        if (div.includes('*')) {\n          if (value.length) {\n            value.push(`/ (${div})`);\n          } else {\n            value.push(`1 / (${div})`);\n          }\n        } else if (value.length) {\n          value.push(`/ ${div}`);\n        } else {\n          value.push(`1 / ${div}`);\n        }\n      }\n    }\n    return value.join(' ') || null;\n  }\n\n  /**\n   * sum values\n   * @returns {?string} - resolved value\n   */\n  sum() {\n    const value = [];\n    if (this.#hasNum) {\n      let num = 0;\n      for (const i of this.#numSum) {\n        num += i;\n        if (!Number.isFinite(num) || Number.isNaN(num)) {\n          break;\n        }\n      }\n      value.push(num);\n    }\n    if (this.#hasPct) {\n      let num = 0;\n      for (const i of this.#pctSum) {\n        num += i;\n        if (!Number.isFinite(num) || Number.isNaN(num)) {\n          break;\n        }\n      }\n      if (Number.isFinite(num)) {\n        num = `${num}%`;\n      }\n      if (value.length) {\n        value.push(`+ ${num}`);\n      } else {\n        value.push(num);\n      }\n    }\n    if (this.#hasDim) {\n      let dim, sum, sub;\n      if (this.#dimSum.length) {\n        sum = this.#dimSum.join(' + ');\n      }\n      if (this.#dimSub.length) {\n        sub = this.#dimSub.join(' + ');\n      }\n      if (sum) {\n        if (sub) {\n          if (sub.includes('-')) {\n            dim = calc(`calc(${sum} - (${sub}))`, {\n              toCanonicalUnits: true\n            });\n          } else {\n            dim = calc(`calc(${sum} - ${sub})`, {\n              toCanonicalUnits: true\n            });\n          }\n        } else {\n          dim = calc(`calc(${sum})`, {\n            toCanonicalUnits: true\n          });\n        }\n      } else {\n        dim = calc(`calc(-1 * (${sub}))`, {\n          toCanonicalUnits: true\n        });\n      }\n      if (value.length) {\n        value.push('+', dim.replace(/^calc/, ''));\n      } else {\n        value.push(dim.replace(/^calc/, ''));\n      }\n    }\n    if (this.#hasEtc) {\n      if (this.#etcSum.length) {\n        const sum = this.sort(this.#etcSum).map(item => {\n          let res;\n          if (REG_OPERATOR.test(item) &&\n              !item.startsWith('(') && !item.endsWith(')')) {\n            res = `(${item})`;\n          } else {\n            res = item;\n          }\n          return res;\n        }).join(' + ');\n        if (value.length) {\n          if (this.#etcSum.length > 1) {\n            value.push(`+ (${sum})`);\n          } else {\n            value.push(`+ ${sum}`);\n          }\n        } else {\n          value.push(`${sum}`);\n        }\n      }\n      if (this.#etcSub.length) {\n        const sub = this.sort(this.#etcSub).map(item => {\n          let res;\n          if (REG_OPERATOR.test(item) &&\n              !item.startsWith('(') && !item.endsWith(')')) {\n            res = `(${item})`;\n          } else {\n            res = item;\n          }\n          return res;\n        }).join(' + ');\n        if (value.length) {\n          if (this.#etcSub.length > 1) {\n            value.push(`- (${sub})`);\n          } else {\n            value.push(`- ${sub}`);\n          }\n        } else if (this.#etcSub.length > 1) {\n          value.push(`-1 * (${sub})`);\n        } else {\n          value.push(`-1 * ${sub}`);\n        }\n      }\n    }\n    return value.join(' ') || null;\n  }\n}\n\n/**\n * sort calc values\n * @param {Array} values - values\n * @param {boolean} finalize - finalize\n * @returns {string} - sorted value\n */\nexport const sortCalcValues = (values = [], finalize = false) => {\n  if (values.length < 3) {\n    return null;\n  }\n  const start = values.shift();\n  const end = values.pop();\n  if (values.length === 1) {\n    const [value] = values;\n    return `${start}${value}${end}`;\n  }\n  const sortedValues = [];\n  const cal = new Calculator();\n  let operator;\n  for (let i = 0, l = values.length; i < l; i++) {\n    const value = values[i];\n    if (value === '*' || value === '/') {\n      operator = value;\n    } else if (value === '+' || value === '-') {\n      const sortedValue = cal.multiply();\n      sortedValues.push(sortedValue, value);\n      cal.clear();\n      operator = null;\n    } else {\n      switch (operator) {\n        case '/': {\n          if (Number.isFinite(value * 1)) {\n            cal.hasNum = true;\n            cal.numMul.push(1 / value);\n          } else if (REG_TYPE_PCT.test(value)) {\n            const [, val] = REG_TYPE_PCT.exec(value);\n            cal.hasPct = true;\n            cal.pctMul.push(MAX_PCT * MAX_PCT / Number(val));\n          } else if (REG_TYPE_DIM.test(value)) {\n            cal.hasDim = true;\n            cal.dimDiv.push(value);\n          } else {\n            cal.hasEtc = true;\n            cal.etcDiv.push(value);\n          }\n          break;\n        }\n        case '*':\n        default: {\n          if (Number.isFinite(value * 1)) {\n            cal.hasNum = true;\n            cal.numMul.push(value * 1);\n          } else if (REG_TYPE_PCT.test(value)) {\n            const [, val] = REG_TYPE_PCT.exec(value);\n            cal.hasPct = true;\n            cal.pctMul.push(Number(val));\n          } else if (REG_TYPE_DIM.test(value)) {\n            cal.hasDim = true;\n            cal.dimMul.push(value);\n          } else {\n            cal.hasEtc = true;\n            cal.etcMul.push(value);\n          }\n        }\n      }\n      if (i === l - 1) {\n        const sortedValue = cal.multiply();\n        sortedValues.push(sortedValue);\n        cal.clear();\n        operator = null;\n      }\n    }\n  }\n  let resolvedValue;\n  if (finalize && (sortedValues.includes('+') || sortedValues.includes('-'))) {\n    const finalizedValues = [];\n    cal.clear();\n    operator = null;\n    for (let i = 0, l = sortedValues.length; i < l; i++) {\n      const value = sortedValues[i];\n      if (value === '+' || value === '-') {\n        operator = value;\n      } else {\n        switch (operator) {\n          case '-': {\n            if (Number.isFinite(value * 1)) {\n              cal.hasNum = true;\n              cal.numSum.push(-1 * value);\n            } else if (REG_TYPE_PCT.test(value)) {\n              const [, val] = REG_TYPE_PCT.exec(value);\n              cal.hasPct = true;\n              cal.pctSum.push(-1 * Number(val));\n            } else if (REG_TYPE_DIM.test(value)) {\n              cal.hasDim = true;\n              cal.dimSub.push(value);\n            } else {\n              cal.hasEtc = true;\n              cal.etcSub.push(value);\n            }\n            break;\n          }\n          case '+':\n          default: {\n            if (Number.isFinite(value * 1)) {\n              cal.hasNum = true;\n              cal.numSum.push(value * 1);\n            } else if (REG_TYPE_PCT.test(value)) {\n              const [, val] = REG_TYPE_PCT.exec(value);\n              cal.hasPct = true;\n              cal.pctSum.push(Number(val));\n            } else if (REG_TYPE_DIM.test(value)) {\n              cal.hasDim = true;\n              cal.dimSum.push(value);\n            } else {\n              cal.hasEtc = true;\n              cal.etcSum.push(value);\n            }\n          }\n        }\n        if (i === l - 1) {\n          const sortedValue = cal.sum();\n          finalizedValues.push(sortedValue);\n          cal.clear();\n          operator = null;\n        }\n      }\n    }\n    resolvedValue = finalizedValues.join(' ');\n  } else {\n    resolvedValue = sortedValues.join(' ');\n  }\n  return `${start}${resolvedValue}${end}`;\n};\n\n/**\n * serialize calc\n * @param {string} value - value\n * @param {object} [opt] - options\n * @param {string} [opt.format] - output format\n * @returns {?string} - resolved value\n */\nexport const serializeCalc = (value, opt = {}) => {\n  const { format } = opt;\n  if (isString(value)) {\n    if (!REG_START_MATH_VAR.test(value) || format !== VAL_SPEC) {\n      return value;\n    }\n    value = value.toLowerCase().trim();\n  } else {\n    throw new TypeError(`${value} is not a string`);\n  }\n  const cacheKey = `{serializeCalc:${value},opt:${valueToJsonString(opt)}}`;\n  if (cachedResults.has(cacheKey)) {\n    return cachedResults.get(cacheKey);\n  }\n  const items = tokenize({ css: value }).map(token => {\n    const [type, value] = token;\n    let res;\n    if (type !== W_SPACE && type !== COMMENT) {\n      res = value;\n    }\n    return res;\n  }).filter(v => v);\n  let startIndex = items.findLastIndex(item => /\\($/.test(item));\n  while (startIndex) {\n    const endIndex = items.findIndex((item, index) => {\n      return item === ')' && index > startIndex;\n    });\n    const slicedValues = items.slice(startIndex, endIndex + 1);\n    let serializedValue = sortCalcValues(slicedValues);\n    if (REG_START_MATH_VAR.test(serializedValue)) {\n      serializedValue = calc(serializedValue, {\n        toCanonicalUnits: true\n      });\n    }\n    items.splice(startIndex, endIndex - startIndex + 1, serializedValue);\n    startIndex = items.findLastIndex(item => /\\($/.test(item));\n  }\n  const serializedCalc = sortCalcValues(items, true);\n  if (cacheKey) {\n    cachedResults.set(cacheKey, serializedCalc);\n  }\n  return serializedCalc;\n};\n\n/**\n * resolve dimension\n * @param {Array} token - token\n * @param {object} [opt] - options\n * @param {object} [opt.dimension] - dimension\n * @returns {?string} - resolved value\n */\nexport const resolveDimension = (token, opt = {}) => {\n  if (!Array.isArray(token)) {\n    throw new TypeError(`${token} is not an array.`);\n  }\n  const [, value,,, detail = {}] = token;\n  const { unit, value: relativeValue } = detail;\n  const { dimension = {} } = opt;\n  if (unit === 'px') {\n    return value;\n  }\n  let res;\n  if (unit && Number.isFinite(relativeValue)) {\n    let pixelValue;\n    if (Object.hasOwnProperty.call(dimension, unit)) {\n      pixelValue = dimension[unit];\n    } else if (typeof dimension.callback === 'function') {\n      pixelValue = dimension.callback(unit);\n    }\n    if (Number.isFinite(pixelValue)) {\n      res = `${relativeValue * pixelValue}px`;\n    }\n  }\n  return res ?? null;\n};\n\n/**\n * parse tokens\n * @param {Array.<Array>} tokens - tokens\n * @param {object} [opt] - options\n * @returns {Array.<string>} - parsed tokens\n */\nexport const parseTokens = (tokens, opt = {}) => {\n  if (!Array.isArray(tokens)) {\n    throw new TypeError(`${tokens} is not an array.`);\n  }\n  const { format } = opt;\n  const mathFunc = new Set();\n  let nest = 0;\n  const res = [];\n  while (tokens.length) {\n    const token = tokens.shift();\n    if (!Array.isArray(token)) {\n      throw new TypeError(`${token} is not an array.`);\n    }\n    const [type, value] = token;\n    switch (type) {\n      case DIM: {\n        let resolvedValue;\n        if (format === VAL_SPEC && !mathFunc.has(nest)) {\n          resolvedValue = value;\n        } else {\n          resolvedValue = resolveDimension(token, opt);\n          if (!resolvedValue) {\n            resolvedValue = value;\n          }\n        }\n        res.push(resolvedValue);\n        break;\n      }\n      case FUNC:\n      case PAREN_OPEN: {\n        res.push(value);\n        nest++;\n        if (REG_START_MATH.test(value)) {\n          mathFunc.add(nest);\n        }\n        break;\n      }\n      case PAREN_CLOSE: {\n        if (res.length) {\n          const lastValue = res[res.length - 1];\n          if (lastValue === ' ') {\n            res.splice(-1, 1, value);\n          } else {\n            res.push(value);\n          }\n        } else {\n          res.push(value);\n        }\n        if (mathFunc.has(nest)) {\n          mathFunc.delete(nest);\n        }\n        nest--;\n        break;\n      }\n      case W_SPACE: {\n        if (res.length) {\n          const lastValue = res[res.length - 1];\n          if (!lastValue.endsWith('(') && lastValue !== ' ') {\n            res.push(value);\n          }\n        }\n        break;\n      }\n      default: {\n        if (type !== COMMENT && type !== EOF) {\n          res.push(value);\n        }\n      }\n    }\n  }\n  return res;\n};\n\n/**\n * resolve CSS calc()\n * @param {string} value - color value including calc()\n * @param {object} [opt] - options\n * @param {object} [opt.dimension] - dimension\n * @param {string} [opt.format] - output format\n * @returns {?string} - value\n */\nexport const cssCalc = (value, opt = {}) => {\n  const { format, dimension } = opt;\n  if (isString(value)) {\n    if (REG_FN_VAR.test(value)) {\n      if (format === VAL_SPEC) {\n        return value;\n      // var() must be resolved before cssCalc()\n      } else {\n        throw new SyntaxError(`Unexpected token ${FN_VAR} found.`);\n      }\n    } else if (!REG_FN_MATH_CALC.test(value)) {\n      return value;\n    }\n    value = value.toLowerCase().trim();\n  } else {\n    throw new TypeError(`${value} is not a string`);\n  }\n  let cacheKey;\n  if (typeof dimension?.callback !== 'function') {\n    cacheKey = `{cssCalc:${value},opt:${valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  let resolvedValue;\n  if (dimension) {\n    const tokens = tokenize({ css: value });\n    const values = parseTokens(tokens, opt);\n    resolvedValue = calc(values.join(''), {\n      toCanonicalUnits: true\n    });\n  } else {\n    resolvedValue = calc(value, {\n      toCanonicalUnits: true\n    });\n  }\n  if (REG_START_MATH_VAR.test(value)) {\n    if (REG_TYPE_DIM_PCT.test(resolvedValue)) {\n      const [, val, unit] = REG_TYPE_DIM_PCT.exec(resolvedValue);\n      resolvedValue = `${roundToPrecision(Number(val), HEX)}${unit}`;\n    }\n    // wrap with `calc()`\n    if (resolvedValue && !REG_START_MATH_VAR.test(resolvedValue) &&\n        format === VAL_SPEC) {\n      resolvedValue = `calc(${resolvedValue})`;\n    }\n  }\n  if (cacheKey) {\n    cachedResults.set(cacheKey, resolvedValue);\n  }\n  return resolvedValue;\n};\n","/**\n * constant.js\n */\n\n/* constants */\nexport const VAL_COMP = 'computedValue';\nexport const VAL_SPEC = 'specifiedValue';\n\n/* values and units */\nconst _DIGIT = '(?:0|[1-9]\\\\d*)';\nconst _COMP = 'clamp|max|min';\nconst _STEP = 'mod|rem|round';\nconst _TRIG = 'a?(?:cos|sin|tan)|atan2';\nconst _EXP = 'exp|hypot|log|pow|sqrt';\nconst _SIGN = 'abs|sign';\nconst _MATH = `${_COMP}|${_STEP}|${_TRIG}|${_EXP}|${_SIGN}`;\nconst _CALC = `calc|${_MATH}`;\nconst _VAR = `var|${_CALC}`;\nexport const ANGLE = 'deg|g?rad|turn';\nexport const NUM = `[+-]?(?:${_DIGIT}(?:\\\\.\\\\d*)?|\\\\.\\\\d+)(?:e-?${_DIGIT})?`;\nexport const NONE = 'none';\nexport const PCT = `${NUM}%`;\nexport const SYN_FN_MATH = `^(?:${_MATH})\\\\($`;\nexport const SYN_FN_MATH_CALC =\n  `^(?:${_CALC})\\\\(|(?<=[*\\\\/\\\\s\\\\(])(?:${_CALC})\\\\(`;\nexport const SYN_FN_MATH_VAR = `^(?:${_VAR})\\\\(`;\nexport const SYN_FN_VAR = '^var\\\\(|(?<=[*\\\\/\\\\s\\\\(])var\\\\(';\n\n/* colors */\nconst _ALPHA = `(?:\\\\s*\\\\/\\\\s*(?:${NUM}|${PCT}|${NONE}))?`;\nconst _ALPHA_LV3 = `(?:\\\\s*,\\\\s*(?:${NUM}|${PCT}))?`;\nconst _COLOR_FUNC = '(?:ok)?l(?:ab|ch)|color|hsla?|hwb|rgba?';\nconst _COLOR_KEY = '[a-z]+|#[\\\\da-f]{3}|#[\\\\da-f]{4}|#[\\\\da-f]{6}|#[\\\\da-f]{8}';\nconst _CS_HUE = '(?:ok)?lch|hsl|hwb';\nconst _CS_HUE_ARC = '(?:de|in)creasing|longer|shorter';\nconst _NUM_ANGLE = `${NUM}(?:${ANGLE})?`;\nconst _NUM_ANGLE_NONE = `(?:${NUM}(?:${ANGLE})?|${NONE})`;\nconst _NUM_PCT_NONE = `(?:${NUM}|${PCT}|${NONE})`;\nexport const CS_HUE = `(?:${_CS_HUE})(?:\\\\s(?:${_CS_HUE_ARC})\\\\shue)?`;\nexport const CS_HUE_CAPT = `(${_CS_HUE})(?:\\\\s(${_CS_HUE_ARC})\\\\shue)?`;\nexport const CS_LAB = '(?:ok)?lab';\nexport const CS_LCH = '(?:ok)?lch';\nexport const CS_SRGB = 'srgb(?:-linear)?';\nexport const CS_RGB = `(?:a98|prophoto)-rgb|display-p3|rec2020|${CS_SRGB}`;\nexport const CS_XYZ = 'xyz(?:-d(?:50|65))?';\nexport const CS_MIX = `${CS_HUE}|${CS_LAB}|${CS_SRGB}|${CS_XYZ}`;\nexport const FN_COLOR = 'color(';\nexport const FN_MIX = 'color-mix(';\nexport const FN_REL = `(?:${_COLOR_FUNC})\\\\(\\\\s*from\\\\s+`;\nexport const FN_REL_CAPT = `(${_COLOR_FUNC})\\\\(\\\\s*from\\\\s+`;\nexport const FN_VAR = 'var(';\nexport const SYN_FN_COLOR =\n  `(?:${CS_RGB}|${CS_XYZ})(?:\\\\s+${_NUM_PCT_NONE}){3}${_ALPHA}`;\nexport const SYN_FN_REL = `^${FN_REL}|(?<=[\\\\s])${FN_REL}`;\nexport const SYN_HSL = `${_NUM_ANGLE_NONE}(?:\\\\s+${_NUM_PCT_NONE}){2}${_ALPHA}`;\nexport const SYN_HSL_LV3 = `${_NUM_ANGLE}(?:\\\\s*,\\\\s*${PCT}){2}${_ALPHA_LV3}`;\nexport const SYN_LCH = `(?:${_NUM_PCT_NONE}\\\\s+){2}${_NUM_ANGLE_NONE}${_ALPHA}`;\nexport const SYN_MOD = `${_NUM_PCT_NONE}(?:\\\\s+${_NUM_PCT_NONE}){2}${_ALPHA}`;\nexport const SYN_RGB_LV3 =\n  `(?:${NUM}(?:\\\\s*,\\\\s*${NUM}){2}|${PCT}(?:\\\\s*,\\\\s*${PCT}){2})${_ALPHA_LV3}`;\nexport const SYN_COLOR_TYPE = `${_COLOR_KEY}|hsla?\\\\(\\\\s*${SYN_HSL_LV3}\\\\s*\\\\)|rgba?\\\\(\\\\s*${SYN_RGB_LV3}\\\\s*\\\\)|(?:hsla?|hwb)\\\\(\\\\s*${SYN_HSL}\\\\s*\\\\)|(?:(?:ok)?lab|rgba?)\\\\(\\\\s*${SYN_MOD}\\\\s*\\\\)|(?:ok)?lch\\\\(\\\\s*${SYN_LCH}\\\\s*\\\\)|color\\\\(\\\\s*${SYN_FN_COLOR}\\\\s*\\\\)`;\nexport const SYN_MIX_PART = `(?:${SYN_COLOR_TYPE})(?:\\\\s+${PCT})?`;\nexport const SYN_MIX = `color-mix\\\\(\\\\s*in\\\\s+(?:${CS_MIX})\\\\s*,\\\\s*${SYN_MIX_PART}\\\\s*,\\\\s*${SYN_MIX_PART}\\\\s*\\\\)`;\nexport const SYN_MIX_CAPT = `color-mix\\\\(\\\\s*in\\\\s+(${CS_MIX})\\\\s*,\\\\s*(${SYN_MIX_PART})\\\\s*,\\\\s*(${SYN_MIX_PART})\\\\s*\\\\)`;\n","/**\n * css-var.js\n */\n\nimport { TokenType, tokenize } from '@csstools/css-tokenizer';\nimport { LRUCache } from 'lru-cache';\nimport { isString } from './common.js';\nimport { cssCalc } from './css-calc.js';\nimport { isColor, valueToJsonString } from './util.js';\n\n/* constants */\nimport { FN_VAR, SYN_FN_MATH_CALC, SYN_FN_VAR, VAL_SPEC } from './constant.js';\nconst {\n  CloseParen: PAREN_CLOSE, Comment: COMMENT, EOF, Ident: IDENT,\n  Whitespace: W_SPACE\n} = TokenType;\n\n/* regexp */\nconst REG_FN_MATH_CALC = new RegExp(SYN_FN_MATH_CALC);\nconst REG_FN_VAR = new RegExp(SYN_FN_VAR);\n\n/* cached results */\nexport const cachedResults = new LRUCache({\n  max: 4096\n});\n\n/**\n * resolve custom property\n * @param {Array.<Array>} tokens - tokens\n * @param {object} [opt] - options\n * @param {object} [opt.customProperty] - custom properties\n * @returns {Array.<string|Array|undefined>} - [tokens, resolvedValue]\n */\nexport function resolveCustomProperty(tokens, opt = {}) {\n  if (!Array.isArray(tokens)) {\n    throw new TypeError(`${tokens} is not an array.`);\n  }\n  const { customProperty = {} } = opt;\n  const items = [];\n  while (tokens.length) {\n    const token = tokens.shift();\n    if (!Array.isArray(token)) {\n      throw new TypeError(`${token} is not an array.`);\n    }\n    const [type, value] = token;\n    // end of var()\n    if (type === PAREN_CLOSE) {\n      break;\n    }\n    // nested var()\n    if (value === FN_VAR) {\n      const [restTokens, item] = resolveCustomProperty(tokens, opt);\n      tokens = restTokens;\n      if (item) {\n        items.push(item);\n      }\n    } else if (type === IDENT) {\n      if (value.startsWith('--')) {\n        if (Object.hasOwnProperty.call(customProperty, value)) {\n          items.push(customProperty[value]);\n        } else if (typeof customProperty.callback === 'function') {\n          const item = customProperty.callback(value);\n          if (item) {\n            items.push(item);\n          }\n        }\n      } else if (value) {\n        items.push(value);\n      }\n    }\n  }\n  let resolveAsColor;\n  if (items.length > 1) {\n    const lastValue = items[items.length - 1];\n    resolveAsColor = isColor(lastValue);\n  }\n  let resolvedValue;\n  for (let item of items) {\n    item = item.trim();\n    if (REG_FN_VAR.test(item)) {\n      // recurse cssVar()\n      item = cssVar(item, opt);\n      if (item) {\n        if (resolveAsColor) {\n          if (isColor(item)) {\n            resolvedValue = item;\n          }\n        } else {\n          resolvedValue = item;\n        }\n      }\n    } else if (REG_FN_MATH_CALC.test(item)) {\n      item = cssCalc(item, opt);\n      if (resolveAsColor) {\n        if (isColor(item)) {\n          resolvedValue = item;\n        }\n      } else {\n        resolvedValue = item;\n      }\n    } else if (item &&\n               !/^(?:inherit|initial|revert(?:-layer)?|unset)$/.test(item)) {\n      if (resolveAsColor) {\n        if (isColor(item)) {\n          resolvedValue = item;\n        }\n      } else {\n        resolvedValue = item;\n      }\n    }\n    if (resolvedValue) {\n      break;\n    }\n  }\n  return [tokens, resolvedValue];\n}\n\n/**\n * parse tokens\n * @param {Array.<Array>} tokens - tokens\n * @param {object} [opt] - options\n * @returns {?Array.<Array>} - parsed tokens\n */\nexport function parseTokens(tokens, opt = {}) {\n  const res = [];\n  while (tokens.length) {\n    const token = tokens.shift();\n    const [type, value] = token;\n    if (value === FN_VAR) {\n      const [restTokens, resolvedValue] = resolveCustomProperty(tokens, opt);\n      if (!resolvedValue) {\n        return null;\n      }\n      tokens = restTokens;\n      res.push(resolvedValue);\n    } else {\n      switch (type) {\n        case PAREN_CLOSE: {\n          if (res.length) {\n            const lastValue = res[res.length - 1];\n            if (lastValue === ' ') {\n              res.splice(-1, 1, value);\n            } else {\n              res.push(value);\n            }\n          } else {\n            res.push(value);\n          }\n          break;\n        }\n        case W_SPACE: {\n          if (res.length) {\n            const lastValue = res[res.length - 1];\n            if (!lastValue.endsWith('(') && lastValue !== ' ') {\n              res.push(value);\n            }\n          }\n          break;\n        }\n        default: {\n          if (type !== COMMENT && type !== EOF) {\n            res.push(value);\n          }\n        }\n      }\n    }\n  }\n  return res;\n}\n\n/**\n * resolve CSS var()\n * @param {string} value - color value including var()\n * @param {object} [opt] - options\n * @param {object} [opt.customProperty] - custom properties\n * @returns {?string} - value\n */\nexport function cssVar(value, opt = {}) {\n  const { customProperty, format } = opt;\n  if (isString(value)) {\n    if (!REG_FN_VAR.test(value) || format === VAL_SPEC) {\n      return value;\n    }\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  let cacheKey;\n  if (typeof customProperty?.callback !== 'function') {\n    cacheKey = `{cssVar:${value},opt:${valueToJsonString(opt)}}`;\n    if (cachedResults.has(cacheKey)) {\n      return cachedResults.get(cacheKey);\n    }\n  }\n  const tokens = tokenize({ css: value });\n  const values = parseTokens(tokens, opt);\n  if (Array.isArray(values)) {\n    let color = values.join('');\n    if (REG_FN_MATH_CALC.test(color)) {\n      color = cssCalc(color, opt);\n    }\n    if (cacheKey) {\n      cachedResults.set(cacheKey, color);\n    }\n    return color;\n  } else {\n    if (cacheKey) {\n      cachedResults.set(cacheKey, null);\n    }\n    return null;\n  }\n}\n","/**\n * relative-color.js\n */\n\nimport { color as colorParser } from '@csstools/css-color-parser';\nimport { parseComponentValue } from '@csstools/css-parser-algorithms';\nimport { TokenType, tokenize } from '@csstools/css-tokenizer';\nimport { LRUCache } from 'lru-cache';\nimport { isString } from './common.js';\nimport { colorToRgb } from './convert.js';\nimport { resolveDimension, serializeCalc } from './css-calc.js';\nimport { resolve } from './resolve.js';\nimport { roundToPrecision, valueToJsonString } from './util.js';\n\n/* constants */\nimport {\n  CS_LAB, CS_LCH, FN_REL, FN_REL_CAPT, FN_VAR, NONE, SYN_COLOR_TYPE,\n  SYN_FN_MATH, SYN_FN_VAR, SYN_MIX, VAL_SPEC\n} from './constant.js';\nimport { NAMED_COLORS } from './color.js';\nconst {\n  CloseParen: PAREN_CLOSE, Comment: COMMENT, Dimension: DIM, EOF,\n  Function: FUNC, Ident: IDENT, Number: NUM, OpenParen: PAREN_OPEN,\n  Percentage: PCT, Whitespace: W_SPACE\n} = TokenType;\nconst NONE_KEY = 'has-none-keywords';\nconst OCT = 8;\nconst DEC = 10;\nconst HEX = 16;\nconst MAX_PCT = 100;\nconst MAX_RGB = 255;\n\n/* regexp */\nconst REG_COLOR_CAPT =\n  new RegExp(`^${FN_REL}(${SYN_COLOR_TYPE}|${SYN_MIX})\\\\s+`);\nconst REG_CS_HSL = /(?:hsla?|hwb)$/;\nconst REG_CS_CIE = new RegExp(`^(?:${CS_LAB}|${CS_LCH})$`);\nconst REG_FN_VAR = new RegExp(SYN_FN_VAR);\nconst REG_REL = new RegExp(FN_REL);\nconst REG_REL_CAPT = new RegExp(`^${FN_REL_CAPT}`);\nconst REG_START_MATH = new RegExp(SYN_FN_MATH);\nconst REG_START_REL = new RegExp(`^${FN_REL}`);\n\n/* cached results */\nexport const cachedResults = new LRUCache({\n  max: 4096\n});\n\n/**\n * resolve relative color channels\n * @param {Array.<Array>} tokens - tokens\n * @param {object} [opt] - options\n * @param {string} [opt.colorSpace] - color space\n * @returns {?Array.<string>} - resolved channels\n */\nexport function resolveColorChannels(tokens, opt = {}) {\n  if (!Array.isArray(tokens)) {\n    throw new TypeError(`${tokens} is not an array.`);\n  }\n  const { colorSpace, format } = opt;\n  const colorChannels = new Map([\n    ['color', ['r', 'g', 'b', 'alpha']],\n    ['hsl', ['h', 's', 'l', 'alpha']],\n    ['hsla', ['h', 's', 'l', 'alpha']],\n    ['hwb', ['h', 'w', 'b', 'alpha']],\n    ['lab', ['l', 'a', 'b', 'alpha']],\n    ['lch', ['l', 'c', 'h', 'alpha']],\n    ['oklab', ['l', 'a', 'b', 'alpha']],\n    ['oklch', ['l', 'c', 'h', 'alpha']],\n    ['rgb', ['r', 'g', 'b', 'alpha']],\n    ['rgba', ['r', 'g', 'b', 'alpha']]\n  ]);\n  const colorChannel = colorChannels.get(colorSpace);\n  const mathFunc = new Set();\n  const channels = [[], [], [], []];\n  let i = 0;\n  let nest = 0;\n  let func = false;\n  while (tokens.length) {\n    const token = tokens.shift();\n    if (!Array.isArray(token)) {\n      throw new TypeError(`${token} is not an array.`);\n    }\n    const [type, value,,, detail = {}] = token;\n    const { value: numValue } = detail;\n    const channel = channels[i];\n    switch (type) {\n      case DIM: {\n        let resolvedValue = resolveDimension(token, opt);\n        if (!resolvedValue) {\n          resolvedValue = value;\n        }\n        channel.push(resolvedValue);\n        break;\n      }\n      case FUNC: {\n        channel.push(value);\n        func = true;\n        nest++;\n        if (REG_START_MATH.test(value)) {\n          mathFunc.add(nest);\n        }\n        break;\n      }\n      case IDENT: {\n        // invalid channel key\n        if (!colorChannel.includes(value)) {\n          return null;\n        }\n        channel.push(value);\n        if (!func) {\n          i++;\n        }\n        break;\n      }\n      case NUM: {\n        channel.push(numValue);\n        if (!func) {\n          i++;\n        }\n        break;\n      }\n      case PAREN_OPEN: {\n        channel.push(value);\n        nest++;\n        break;\n      }\n      case PAREN_CLOSE: {\n        if (func) {\n          const lastValue = channel[channel.length - 1];\n          if (lastValue === ' ') {\n            channel.splice(-1, 1, value);\n          } else {\n            channel.push(value);\n          }\n          if (mathFunc.has(nest)) {\n            mathFunc.delete(nest);\n          }\n          nest--;\n          if (nest === 0) {\n            func = false;\n            i++;\n          }\n        }\n        break;\n      }\n      case PCT: {\n        channel.push(numValue / MAX_PCT);\n        if (!func) {\n          i++;\n        }\n        break;\n      }\n      case W_SPACE: {\n        if (channel.length && func) {\n          const lastValue = channel[channel.length - 1];\n          if (typeof lastValue === 'number') {\n            channel.push(value);\n          } else if (isString(lastValue) &&\n                     !lastValue.endsWith('(') && lastValue !== ' ') {\n            channel.push(value);\n          }\n        }\n        break;\n      }\n      default: {\n        if (type !== COMMENT && type !== EOF && func) {\n          channel.push(value);\n        }\n      }\n    }\n  }\n  const channelValues = [];\n  for (const channel of channels) {\n    if (channel.length === 1) {\n      const [resolvedValue] = channel;\n      channelValues.push(resolvedValue);\n    } else if (channel.length) {\n      const resolvedValue = serializeCalc(channel.join(''), {\n        format\n      });\n      channelValues.push(resolvedValue);\n    }\n  }\n  return channelValues;\n}\n\n/**\n * extract origin color\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {string} [opt.currentColor] - current color value\n * @returns {?string} - value\n */\nexport function extractOriginColor(value, opt = {}) {\n  if (isString(value)) {\n    value = value.toLowerCase().trim();\n    if (!value) {\n      return null;\n    }\n    if (!REG_START_REL.test(value)) {\n      return value;\n    }\n  } else {\n    return null;\n  }\n  const { currentColor, format } = opt;\n  const cacheKey = `{preProcess:${value},opt:${valueToJsonString(opt)}}`;\n  if (cachedResults.has(cacheKey)) {\n    return cachedResults.get(cacheKey);\n  }\n  if (/currentcolor/.test(value)) {\n    if (currentColor) {\n      value = value.replace(/currentcolor/g, currentColor);\n    } else {\n      if (cacheKey) {\n        cachedResults.set(cacheKey, null);\n      }\n      return null;\n    }\n  }\n  const [, colorSpace] = REG_REL_CAPT.exec(value);\n  opt.colorSpace = colorSpace;\n  if (REG_COLOR_CAPT.test(value)) {\n    const [, originColor] = REG_COLOR_CAPT.exec(value);\n    const [, restValue] = value.split(originColor);\n    if (/^[a-z]+$/.test(originColor)) {\n      if (!/^transparent$/.test(originColor) &&\n          !Object.prototype.hasOwnProperty.call(NAMED_COLORS, originColor)) {\n        if (cacheKey) {\n          cachedResults.set(cacheKey, null);\n        }\n        return null;\n      }\n    } else if (format === VAL_SPEC) {\n      const resolvedOriginColor = resolve(originColor, opt);\n      value = value.replace(originColor, resolvedOriginColor);\n    }\n    if (format === VAL_SPEC) {\n      const tokens = tokenize({ css: restValue });\n      const channelValues = resolveColorChannels(tokens, opt);\n      if (!Array.isArray(channelValues)) {\n        if (cacheKey) {\n          cachedResults.set(cacheKey, null);\n        }\n        return null;\n      }\n      let channelValue;\n      if (channelValues.length === 3) {\n        channelValue = ` ${channelValues.join(' ')})`;\n      } else {\n        const [v1, v2, v3, v4] = channelValues;\n        channelValue = ` ${v1} ${v2} ${v3} / ${v4})`;\n      }\n      value = value.replace(restValue, channelValue);\n    }\n  // nested relative color\n  } else {\n    const [, restValue] = value.split(REG_START_REL);\n    if (REG_START_REL.test(restValue)) {\n      const tokens = tokenize({ css: restValue });\n      let originColor = [];\n      let nest = 0;\n      while (tokens.length) {\n        const token = tokens.shift();\n        const [type, tokenValue] = token;\n        switch (type) {\n          case FUNC:\n          case PAREN_OPEN: {\n            originColor.push(tokenValue);\n            nest++;\n            break;\n          }\n          case PAREN_CLOSE: {\n            const lastValue = originColor[originColor.length - 1];\n            if (lastValue === ' ') {\n              originColor.splice(-1, 1, tokenValue);\n            } else {\n              originColor.push(tokenValue);\n            }\n            nest--;\n            break;\n          }\n          case W_SPACE: {\n            const lastValue = originColor[originColor.length - 1];\n            if (!lastValue.endsWith('(') && lastValue !== ' ') {\n              originColor.push(tokenValue);\n            }\n            break;\n          }\n          default: {\n            if (type !== COMMENT && type !== EOF) {\n              originColor.push(tokenValue);\n            }\n          }\n        }\n        if (nest === 0) {\n          break;\n        }\n      }\n      originColor = resolveRelativeColor(originColor.join('').trim(), opt);\n      if (!originColor) {\n        if (cacheKey) {\n          cachedResults.set(cacheKey, null);\n        }\n        return null;\n      }\n      const channelValues = resolveColorChannels(tokens, opt);\n      if (!Array.isArray(channelValues)) {\n        if (cacheKey) {\n          cachedResults.set(cacheKey, null);\n        }\n        return null;\n      }\n      let channelValue;\n      if (channelValues.length === 3) {\n        channelValue = ` ${channelValues.join(' ')})`;\n      } else {\n        const [v1, v2, v3, v4] = channelValues;\n        channelValue = ` ${v1} ${v2} ${v3} / ${v4})`;\n      }\n      value = value.replace(restValue, `${originColor}${channelValue}`);\n    }\n  }\n  if (cacheKey) {\n    cachedResults.set(cacheKey, value);\n  }\n  return value;\n}\n\n/**\n * resolve relative color\n * @param {string} value - relative color value\n * @param {object} [opt] - options\n * @param {string} [opt.format] - output format\n * @returns {?string} - value\n */\nexport function resolveRelativeColor(value, opt = {}) {\n  const { format } = opt;\n  if (isString(value)) {\n    if (REG_FN_VAR.test(value)) {\n      if (format === VAL_SPEC) {\n        return value;\n      // var() must be resolved before resolveRelativeColor()\n      } else {\n        throw new SyntaxError(`Unexpected token ${FN_VAR} found.`);\n      }\n    } else if (!REG_REL.test(value)) {\n      return value;\n    }\n    value = value.toLowerCase().trim();\n  } else {\n    throw new TypeError(`${value} is not a string`);\n  }\n  const cacheKey = `{relativeColor:${value},opt:${valueToJsonString(opt)}}`;\n  if (cachedResults.has(cacheKey)) {\n    return cachedResults.get(cacheKey);\n  }\n  value = extractOriginColor(value, opt);\n  if (!value) {\n    if (cacheKey) {\n      cachedResults.set(cacheKey, null);\n    }\n    return null;\n  }\n  if (format === VAL_SPEC) {\n    if (value.startsWith('rgba(')) {\n      value = value.replace(/^rgba\\(/, 'rgb(');\n    } else if (value.startsWith('hsla(')) {\n      value = value.replace(/^hsla\\(/, 'hsl(');\n    }\n    return value;\n  }\n  const tokens = tokenize({ css: value });\n  const components = parseComponentValue(tokens);\n  const parsedComponents = colorParser(components);\n  if (!parsedComponents) {\n    if (cacheKey) {\n      cachedResults.set(cacheKey, null);\n    }\n    return null;\n  }\n  let {\n    alpha, channels: [v1, v2, v3], colorNotation, syntaxFlags\n  } = parsedComponents;\n  if (Number.isNaN(alpha)) {\n    if (syntaxFlags.has(NONE_KEY)) {\n      alpha = NONE;\n    } else {\n      alpha = 0;\n    }\n  } else {\n    alpha = roundToPrecision(alpha, OCT);\n  }\n  let resolvedValue;\n  if (REG_CS_CIE.test(colorNotation)) {\n    if (Number.isNaN(v1)) {\n      if (syntaxFlags.has(NONE_KEY)) {\n        v1 = NONE;\n      } else {\n        v1 = 0;\n      }\n    } else {\n      v1 = roundToPrecision(v1, HEX);\n    }\n    if (Number.isNaN(v2)) {\n      if (syntaxFlags.has(NONE_KEY)) {\n        v2 = NONE;\n      } else {\n        v2 = 0;\n      }\n    } else {\n      v2 = roundToPrecision(v2, HEX);\n    }\n    if (Number.isNaN(v3)) {\n      if (syntaxFlags.has(NONE_KEY)) {\n        v3 = NONE;\n      } else {\n        v3 = 0;\n      }\n    } else {\n      v3 = roundToPrecision(v3, HEX);\n    }\n    if (alpha === 1) {\n      resolvedValue = `${colorNotation}(${v1} ${v2} ${v3})`;\n    } else {\n      resolvedValue = `${colorNotation}(${v1} ${v2} ${v3} / ${alpha})`;\n    }\n  } else if (REG_CS_HSL.test(colorNotation)) {\n    if (Number.isNaN(v1)) {\n      v1 = 0;\n    }\n    if (Number.isNaN(v2)) {\n      v2 = 0;\n    }\n    if (Number.isNaN(v3)) {\n      v3 = 0;\n    }\n    let [r, g, b] =\n      colorToRgb(`${colorNotation}(${v1} ${v2} ${v3} / ${alpha})`);\n    r = roundToPrecision(r / MAX_RGB, DEC);\n    g = roundToPrecision(g / MAX_RGB, DEC);\n    b = roundToPrecision(b / MAX_RGB, DEC);\n    if (alpha === 1) {\n      resolvedValue = `color(srgb ${r} ${g} ${b})`;\n    } else {\n      resolvedValue = `color(srgb ${r} ${g} ${b} / ${alpha})`;\n    }\n  } else {\n    const cs = colorNotation === 'rgb' ? 'srgb' : colorNotation;\n    if (Number.isNaN(v1)) {\n      if (syntaxFlags.has(NONE_KEY)) {\n        v1 = NONE;\n      } else {\n        v1 = 0;\n      }\n    } else {\n      v1 = roundToPrecision(v1, DEC);\n    }\n    if (Number.isNaN(v2)) {\n      if (syntaxFlags.has(NONE_KEY)) {\n        v2 = NONE;\n      } else {\n        v2 = 0;\n      }\n    } else {\n      v2 = roundToPrecision(v2, DEC);\n    }\n    if (Number.isNaN(v3)) {\n      if (syntaxFlags.has(NONE_KEY)) {\n        v3 = NONE;\n      } else {\n        v3 = 0;\n      }\n    } else {\n      v3 = roundToPrecision(v3, DEC);\n    }\n    if (alpha === 1) {\n      resolvedValue = `color(${cs} ${v1} ${v2} ${v3})`;\n    } else {\n      resolvedValue = `color(${cs} ${v1} ${v2} ${v3} / ${alpha})`;\n    }\n  }\n  if (cacheKey) {\n    cachedResults.set(cacheKey, resolvedValue);\n  }\n  return resolvedValue;\n}\n","/**\n * util.js\n */\n\nimport { isString } from './common.js';\nimport { resolve } from './resolve.js';\n\n/* constants */\nimport { NAMED_COLORS } from './color.js';\nimport { SYN_COLOR_TYPE, SYN_MIX, VAL_SPEC } from './constant.js';\nconst DEC = 10;\nconst HEX = 16;\nconst DEG = 360;\nconst DEG_HALF = 180;\n\n/* regexp */\nconst REG_COLOR = new RegExp(`^(?:${SYN_COLOR_TYPE})$`);\nconst REG_MIX = new RegExp(`${SYN_MIX}`);\n\n/**\n * is color\n * @param {string} value - value\n * @returns {boolean} - result\n */\nexport const isColor = value => {\n  if (isString(value)) {\n    value = value.toLowerCase().trim();\n    if (value) {\n      if (/^[a-z]+$/.test(value)) {\n        if (/^(?:currentcolor|transparent)$/.test(value) ||\n            Object.prototype.hasOwnProperty.call(NAMED_COLORS, value)) {\n          return true;\n        }\n      } else if (REG_COLOR.test(value) || REG_MIX.test(value)) {\n        return true;\n      } else {\n        value = resolve(value, {\n          format: VAL_SPEC\n        });\n        if (value) {\n          return true;\n        }\n        return false;\n      }\n    }\n  }\n  return false;\n};\n\n/**\n * value to JSON string\n * @param {*} value - value\n * @param {boolean} func - stringify function\n * @returns {string} - stringified value in JSON notation\n */\nexport const valueToJsonString = (value, func = false) => {\n  if (typeof value === 'undefined') {\n    return '';\n  }\n  const res = JSON.stringify(value, (key, val) => {\n    let replacedValue;\n    if (typeof val === 'undefined') {\n      replacedValue = null;\n    } else if (typeof val === 'function') {\n      if (func) {\n        replacedValue = val.toString();\n      } else {\n        replacedValue = val.name;\n      }\n    } else if (val instanceof Map || val instanceof Set) {\n      replacedValue = [...val];\n    } else if (typeof val === 'bigint') {\n      replacedValue = val.toString();\n    } else {\n      replacedValue = val;\n    }\n    return replacedValue;\n  });\n  return res;\n};\n\n/**\n * round to specified precision\n * @param {number} value - value\n * @param {number} bit - minimum bits\n * @returns {number} - rounded value\n */\nexport const roundToPrecision = (value, bit = 0) => {\n  if (!Number.isFinite(value)) {\n    throw new TypeError(`${value} is not a number.`);\n  }\n  if (!Number.isFinite(bit)) {\n    throw new TypeError(`${bit} is not a number.`);\n  } else if (bit < 0 || bit > HEX) {\n    throw new RangeError(`${bit} is not between 0 and ${HEX}.`);\n  }\n  if (bit === 0) {\n    return Math.round(value);\n  }\n  let val;\n  if (bit === HEX) {\n    val = value.toPrecision(6);\n  } else if (bit < DEC) {\n    val = value.toPrecision(4);\n  } else {\n    val = value.toPrecision(5);\n  }\n  return parseFloat(val);\n};\n\n/**\n * interpolate hue\n * @param {number} hueA - hue\n * @param {number} hueB - hue\n * @param {string} arc - arc\n * @returns {Array} - [hueA, hueB]\n */\nexport const interpolateHue = (hueA, hueB, arc = 'shorter') => {\n  if (!Number.isFinite(hueA)) {\n    throw new TypeError(`${hueA} is not a number.`);\n  }\n  if (!Number.isFinite(hueB)) {\n    throw new TypeError(`${hueB} is not a number.`);\n  }\n  switch (arc) {\n    case 'decreasing': {\n      if (hueB > hueA) {\n        hueA += DEG;\n      }\n      break;\n    }\n    case 'increasing': {\n      if (hueB < hueA) {\n        hueB += DEG;\n      }\n      break;\n    }\n    case 'longer': {\n      if (hueB > hueA && hueB < hueA + DEG_HALF) {\n        hueA += DEG;\n      } else if (hueB > hueA + DEG_HALF * -1 && hueB <= hueA) {\n        hueB += DEG;\n      }\n      break;\n    }\n    case 'shorter':\n    default: {\n      if (hueB > hueA + DEG_HALF) {\n        hueA += DEG;\n      } else if (hueB < hueA + DEG_HALF * -1) {\n        hueB += DEG;\n      }\n    }\n  }\n  return [hueA, hueB];\n};\n","/**\n * color.js\n *\n * Ref: CSS Color Module Level 4\n *      Sample code for Color Conversions\n *      https://w3c.github.io/csswg-drafts/css-color-4/#color-conversion-code\n */\n\nimport { isString } from './common.js';\nimport { interpolateHue, roundToPrecision } from './util.js';\n\n/* constants */\nimport {\n  ANGLE, CS_HUE_CAPT, CS_MIX, CS_RGB, CS_XYZ, FN_COLOR, FN_MIX, NONE, NUM, PCT,\n  SYN_COLOR_TYPE, SYN_FN_COLOR, SYN_HSL, SYN_HSL_LV3, SYN_LCH, SYN_MIX,\n  SYN_MIX_CAPT, SYN_MOD, SYN_RGB_LV3, VAL_COMP, VAL_SPEC\n} from './constant.js';\nconst VAL_MIX = 'mixValue';\n\n/* numeric constants */\nconst PPTH = 0.001;\nconst HALF = 0.5;\nconst DUO = 2;\nconst TRIA = 3;\nconst QUAT = 4;\nconst OCT = 8;\nconst DEC = 10;\nconst DOZ = 12;\nconst HEX = 16;\nconst SEXA = 60;\nconst DEG = 360;\nconst MAX_PCT = 100;\nconst MAX_RGB = 255;\nconst POW_SQR = 2;\nconst POW_CUBE = 3;\nconst POW_LINEAR = 2.4;\nconst LINEAR_COEF = 12.92;\nconst LINEAR_OFFSET = 0.055;\nconst LAB_L = 116;\nconst LAB_A = 500;\nconst LAB_B = 200;\nconst LAB_EPSILON = 216 / 24389;\nconst LAB_KAPPA = 24389 / 27;\n\n/* white point */\nconst D50 = [0.3457 / 0.3585, 1.00000, (1.0 - 0.3457 - 0.3585) / 0.3585];\nconst MATRIX_D50_TO_D65 = [\n  [0.955473421488075, -0.02309845494876471, 0.06325924320057072],\n  [-0.0283697093338637, 1.0099953980813041, 0.021041441191917323],\n  [0.012314014864481998, -0.020507649298898964, 1.330365926242124]\n];\nconst MATRIX_D65_TO_D50 = [\n  [1.0479297925449969, 0.022946870601609652, -0.05019226628920524],\n  [0.02962780877005599, 0.9904344267538799, -0.017073799063418826],\n  [-0.009243040646204504, 0.015055191490298152, 0.7518742814281371]\n];\n\n/* color space */\nconst MATRIX_L_RGB_TO_XYZ = [\n  [506752 / 1228815, 87881 / 245763, 12673 / 70218],\n  [87098 / 409605, 175762 / 245763, 12673 / 175545],\n  [7918 / 409605, 87881 / 737289, 1001167 / 1053270]\n];\nconst MATRIX_XYZ_TO_L_RGB = [\n  [12831 / 3959, -329 / 214, -1974 / 3959],\n  [-851781 / 878810, 1648619 / 878810, 36519 / 878810],\n  [705 / 12673, -2585 / 12673, 705 / 667]\n];\nconst MATRIX_XYZ_TO_LMS = [\n  [0.8190224379967030, 0.3619062600528904, -0.1288737815209879],\n  [0.0329836539323885, 0.9292868615863434, 0.0361446663506424],\n  [0.0481771893596242, 0.2642395317527308, 0.6335478284694309]\n];\nconst MATRIX_LMS_TO_XYZ = [\n  [1.2268798758459243, -0.5578149944602171, 0.2813910456659647],\n  [-0.0405757452148008, 1.1122868032803170, -0.0717110580655164],\n  [-0.0763729366746601, -0.4214933324022432, 1.5869240198367816]\n];\nconst MATRIX_OKLAB_TO_LMS = [\n  [1.0000000000000000, 0.3963377773761749, 0.2158037573099136],\n  [1.0000000000000000, -0.1055613458156586, -0.0638541728258133],\n  [1.0000000000000000, -0.0894841775298119, -1.2914855480194092]\n];\nconst MATRIX_LMS_TO_OKLAB = [\n  [0.2104542683093140, 0.7936177747023054, -0.0040720430116193],\n  [1.9779985324311684, -2.4285922420485799, 0.4505937096174110],\n  [0.0259040424655478, 0.7827717124575296, -0.8086757549230774]\n];\nconst MATRIX_P3_TO_XYZ = [\n  [608311 / 1250200, 189793 / 714400, 198249 / 1000160],\n  [35783 / 156275, 247089 / 357200, 198249 / 2500400],\n  [0 / 1, 32229 / 714400, 5220557 / 5000800]\n];\nconst MATRIX_REC2020_TO_XYZ = [\n  [63426534 / 99577255, 20160776 / 139408157, 47086771 / 278816314],\n  [26158966 / 99577255, 472592308 / 697040785, 8267143 / 139408157],\n  [0 / 1, 19567812 / 697040785, 295819943 / 278816314]\n];\nconst MATRIX_A98_TO_XYZ = [\n  [573536 / 994567, 263643 / 1420810, 187206 / 994567],\n  [591459 / 1989134, 6239551 / 9945670, 374412 / 4972835],\n  [53769 / 1989134, 351524 / 4972835, 4929758 / 4972835]\n];\nconst MATRIX_PROPHOTO_TO_XYZ_D50 = [\n  [0.79776664490064230, 0.13518129740053308, 0.03134773412839220],\n  [0.28807482881940130, 0.71183523424187300, 0.00008993693872564],\n  [0.00000000000000000, 0.00000000000000000, 0.82510460251046020]\n];\n\n/* regexp */\nconst REG_COLOR = new RegExp(`^(?:${SYN_COLOR_TYPE})$`);\nconst REG_CS_HUE = new RegExp(`^${CS_HUE_CAPT}$`);\nconst REG_CS_XYZ = /^xyz(?:-d(?:50|65))?$/;\nconst REG_CURRENT = /^currentColor$/i;\nconst REG_FN_COLOR = new RegExp(`^color\\\\(\\\\s*(${SYN_FN_COLOR})\\\\s*\\\\)$`);\nconst REG_HSL = new RegExp(`^hsla?\\\\(\\\\s*(${SYN_HSL}|${SYN_HSL_LV3})\\\\s*\\\\)$`);\nconst REG_HWB = new RegExp(`^hwb\\\\(\\\\s*(${SYN_HSL})\\\\s*\\\\)$`);\nconst REG_LAB = new RegExp(`^lab\\\\(\\\\s*(${SYN_MOD})\\\\s*\\\\)$`);\nconst REG_LCH = new RegExp(`^lch\\\\(\\\\s*(${SYN_LCH})\\\\s*\\\\)$`);\nconst REG_MIX = new RegExp(`^${SYN_MIX}$`);\nconst REG_MIX_CAPT = new RegExp(`^${SYN_MIX_CAPT}$`);\nconst REG_MIX_NEST = new RegExp(`${SYN_MIX}`, 'g');\nconst REG_OKLAB = new RegExp(`^oklab\\\\(\\\\s*(${SYN_MOD})\\\\s*\\\\)$`);\nconst REG_OKLCH = new RegExp(`^oklch\\\\(\\\\s*(${SYN_LCH})\\\\s*\\\\)$`);\nconst REG_SPEC = /^(?:specifi|comput)edValue$/;\n\n/* named colors */\nexport const NAMED_COLORS = {\n  aliceblue: [0xF0, 0xF8, 0xFF],\n  antiquewhite: [0xFA, 0xEB, 0xD7],\n  aqua: [0x00, 0xFF, 0xFF],\n  aquamarine: [0x7F, 0xFF, 0xD4],\n  azure: [0xF0, 0xFF, 0xFF],\n  beige: [0xF5, 0xF5, 0xDC],\n  bisque: [0xFF, 0xE4, 0xC4],\n  black: [0x00, 0x00, 0x00],\n  blanchedalmond: [0xFF, 0xEB, 0xCD],\n  blue: [0x00, 0x00, 0xFF],\n  blueviolet: [0x8A, 0x2B, 0xE2],\n  brown: [0xA5, 0x2A, 0x2A],\n  burlywood: [0xDE, 0xB8, 0x87],\n  cadetblue: [0x5F, 0x9E, 0xA0],\n  chartreuse: [0x7F, 0xFF, 0x00],\n  chocolate: [0xD2, 0x69, 0x1E],\n  coral: [0xFF, 0x7F, 0x50],\n  cornflowerblue: [0x64, 0x95, 0xED],\n  cornsilk: [0xFF, 0xF8, 0xDC],\n  crimson: [0xDC, 0x14, 0x3C],\n  cyan: [0x00, 0xFF, 0xFF],\n  darkblue: [0x00, 0x00, 0x8B],\n  darkcyan: [0x00, 0x8B, 0x8B],\n  darkgoldenrod: [0xB8, 0x86, 0x0B],\n  darkgray: [0xA9, 0xA9, 0xA9],\n  darkgreen: [0x00, 0x64, 0x00],\n  darkgrey: [0xA9, 0xA9, 0xA9],\n  darkkhaki: [0xBD, 0xB7, 0x6B],\n  darkmagenta: [0x8B, 0x00, 0x8B],\n  darkolivegreen: [0x55, 0x6B, 0x2F],\n  darkorange: [0xFF, 0x8C, 0x00],\n  darkorchid: [0x99, 0x32, 0xCC],\n  darkred: [0x8B, 0x00, 0x00],\n  darksalmon: [0xE9, 0x96, 0x7A],\n  darkseagreen: [0x8F, 0xBC, 0x8F],\n  darkslateblue: [0x48, 0x3D, 0x8B],\n  darkslategray: [0x2F, 0x4F, 0x4F],\n  darkslategrey: [0x2F, 0x4F, 0x4F],\n  darkturquoise: [0x00, 0xCE, 0xD1],\n  darkviolet: [0x94, 0x00, 0xD3],\n  deeppink: [0xFF, 0x14, 0x93],\n  deepskyblue: [0x00, 0xBF, 0xFF],\n  dimgray: [0x69, 0x69, 0x69],\n  dimgrey: [0x69, 0x69, 0x69],\n  dodgerblue: [0x1E, 0x90, 0xFF],\n  firebrick: [0xB2, 0x22, 0x22],\n  floralwhite: [0xFF, 0xFA, 0xF0],\n  forestgreen: [0x22, 0x8B, 0x22],\n  fuchsia: [0xFF, 0x00, 0xFF],\n  gainsboro: [0xDC, 0xDC, 0xDC],\n  ghostwhite: [0xF8, 0xF8, 0xFF],\n  gold: [0xFF, 0xD7, 0x00],\n  goldenrod: [0xDA, 0xA5, 0x20],\n  gray: [0x80, 0x80, 0x80],\n  green: [0x00, 0x80, 0x00],\n  greenyellow: [0xAD, 0xFF, 0x2F],\n  grey: [0x80, 0x80, 0x80],\n  honeydew: [0xF0, 0xFF, 0xF0],\n  hotpink: [0xFF, 0x69, 0xB4],\n  indianred: [0xCD, 0x5C, 0x5C],\n  indigo: [0x4B, 0x00, 0x82],\n  ivory: [0xFF, 0xFF, 0xF0],\n  khaki: [0xF0, 0xE6, 0x8C],\n  lavender: [0xE6, 0xE6, 0xFA],\n  lavenderblush: [0xFF, 0xF0, 0xF5],\n  lawngreen: [0x7C, 0xFC, 0x00],\n  lemonchiffon: [0xFF, 0xFA, 0xCD],\n  lightblue: [0xAD, 0xD8, 0xE6],\n  lightcoral: [0xF0, 0x80, 0x80],\n  lightcyan: [0xE0, 0xFF, 0xFF],\n  lightgoldenrodyellow: [0xFA, 0xFA, 0xD2],\n  lightgray: [0xD3, 0xD3, 0xD3],\n  lightgreen: [0x90, 0xEE, 0x90],\n  lightgrey: [0xD3, 0xD3, 0xD3],\n  lightpink: [0xFF, 0xB6, 0xC1],\n  lightsalmon: [0xFF, 0xA0, 0x7A],\n  lightseagreen: [0x20, 0xB2, 0xAA],\n  lightskyblue: [0x87, 0xCE, 0xFA],\n  lightslategray: [0x77, 0x88, 0x99],\n  lightslategrey: [0x77, 0x88, 0x99],\n  lightsteelblue: [0xB0, 0xC4, 0xDE],\n  lightyellow: [0xFF, 0xFF, 0xE0],\n  lime: [0x00, 0xFF, 0x00],\n  limegreen: [0x32, 0xCD, 0x32],\n  linen: [0xFA, 0xF0, 0xE6],\n  magenta: [0xFF, 0x00, 0xFF],\n  maroon: [0x80, 0x00, 0x00],\n  mediumaquamarine: [0x66, 0xCD, 0xAA],\n  mediumblue: [0x00, 0x00, 0xCD],\n  mediumorchid: [0xBA, 0x55, 0xD3],\n  mediumpurple: [0x93, 0x70, 0xDB],\n  mediumseagreen: [0x3C, 0xB3, 0x71],\n  mediumslateblue: [0x7B, 0x68, 0xEE],\n  mediumspringgreen: [0x00, 0xFA, 0x9A],\n  mediumturquoise: [0x48, 0xD1, 0xCC],\n  mediumvioletred: [0xC7, 0x15, 0x85],\n  midnightblue: [0x19, 0x19, 0x70],\n  mintcream: [0xF5, 0xFF, 0xFA],\n  mistyrose: [0xFF, 0xE4, 0xE1],\n  moccasin: [0xFF, 0xE4, 0xB5],\n  navajowhite: [0xFF, 0xDE, 0xAD],\n  navy: [0x00, 0x00, 0x80],\n  oldlace: [0xFD, 0xF5, 0xE6],\n  olive: [0x80, 0x80, 0x00],\n  olivedrab: [0x6B, 0x8E, 0x23],\n  orange: [0xFF, 0xA5, 0x00],\n  orangered: [0xFF, 0x45, 0x00],\n  orchid: [0xDA, 0x70, 0xD6],\n  palegoldenrod: [0xEE, 0xE8, 0xAA],\n  palegreen: [0x98, 0xFB, 0x98],\n  paleturquoise: [0xAF, 0xEE, 0xEE],\n  palevioletred: [0xDB, 0x70, 0x93],\n  papayawhip: [0xFF, 0xEF, 0xD5],\n  peachpuff: [0xFF, 0xDA, 0xB9],\n  peru: [0xCD, 0x85, 0x3F],\n  pink: [0xFF, 0xC0, 0xCB],\n  plum: [0xDD, 0xA0, 0xDD],\n  powderblue: [0xB0, 0xE0, 0xE6],\n  purple: [0x80, 0x00, 0x80],\n  rebeccapurple: [0x66, 0x33, 0x99],\n  red: [0xFF, 0x00, 0x00],\n  rosybrown: [0xBC, 0x8F, 0x8F],\n  royalblue: [0x41, 0x69, 0xE1],\n  saddlebrown: [0x8B, 0x45, 0x13],\n  salmon: [0xFA, 0x80, 0x72],\n  sandybrown: [0xF4, 0xA4, 0x60],\n  seagreen: [0x2E, 0x8B, 0x57],\n  seashell: [0xFF, 0xF5, 0xEE],\n  sienna: [0xA0, 0x52, 0x2D],\n  silver: [0xC0, 0xC0, 0xC0],\n  skyblue: [0x87, 0xCE, 0xEB],\n  slateblue: [0x6A, 0x5A, 0xCD],\n  slategray: [0x70, 0x80, 0x90],\n  slategrey: [0x70, 0x80, 0x90],\n  snow: [0xFF, 0xFA, 0xFA],\n  springgreen: [0x00, 0xFF, 0x7F],\n  steelblue: [0x46, 0x82, 0xB4],\n  tan: [0xD2, 0xB4, 0x8C],\n  teal: [0x00, 0x80, 0x80],\n  thistle: [0xD8, 0xBF, 0xD8],\n  tomato: [0xFF, 0x63, 0x47],\n  turquoise: [0x40, 0xE0, 0xD0],\n  violet: [0xEE, 0x82, 0xEE],\n  wheat: [0xF5, 0xDE, 0xB3],\n  white: [0xFF, 0xFF, 0xFF],\n  whitesmoke: [0xF5, 0xF5, 0xF5],\n  yellow: [0xFF, 0xFF, 0x00],\n  yellowgreen: [0x9A, 0xCD, 0x32]\n};\n\n/**\n * validate color components\n * @param {Array} arr - array of color components\n * @param {object} [opt] - options\n * @param {boolean} [opt.alpha] - alpha channel\n * @param {number} [opt.minLength] - min length\n * @param {number} [opt.maxLength] - max length\n * @param {number} [opt.minRange] - min range\n * @param {number} [opt.maxRange] - max range\n * @param {boolean} [opt.validateRange] - validate range\n * @returns {Array} - validated color components\n */\nexport const validateColorComponents = (arr, opt = {}) => {\n  if (!Array.isArray(arr)) {\n    throw new TypeError(`${arr} is not an array.`);\n  }\n  const {\n    alpha = false,\n    minLength = TRIA,\n    maxLength = QUAT,\n    minRange = 0,\n    maxRange = 1,\n    validateRange = true\n  } = opt;\n  if (!Number.isFinite(minLength)) {\n    throw new TypeError(`${minLength} is not a number.`);\n  }\n  if (!Number.isFinite(maxLength)) {\n    throw new TypeError(`${maxLength} is not a number.`);\n  }\n  if (!Number.isFinite(minRange)) {\n    throw new TypeError(`${minRange} is not a number.`);\n  }\n  if (!Number.isFinite(maxRange)) {\n    throw new TypeError(`${maxRange} is not a number.`);\n  }\n  const l = arr.length;\n  if (l < minLength || l > maxLength) {\n    throw new Error(`Unexpected array length ${l}.`);\n  }\n  let i = 0;\n  while (i < l) {\n    const v = arr[i];\n    if (!Number.isFinite(v)) {\n      throw new TypeError(`${v} is not a number.`);\n    } else if (i < TRIA && validateRange && (v < minRange || v > maxRange)) {\n      throw new RangeError(`${v} is not between ${minRange} and ${maxRange}.`);\n    } else if (i === TRIA && (v < 0 || v > 1)) {\n      throw new RangeError(`${v} is not between 0 and 1.`);\n    }\n    i++;\n  }\n  if (alpha && l === TRIA) {\n    arr.push(1);\n  }\n  return arr;\n};\n\n/**\n * transform matrix\n * @param {Array.<Array.<number>>} mtx - 3 * 3 matrix\n * @param {Array.<number>} vct - vector\n * @param {boolean} skip - skip alidate\n * @returns {Array.<number>} - [p1, p2, p3]\n */\nexport const transformMatrix = (mtx, vct, skip = false) => {\n  if (!Array.isArray(mtx)) {\n    throw new TypeError(`${mtx} is not an array.`);\n  } else if (mtx.length !== TRIA) {\n    throw new Error(`Unexpected array length ${mtx.length}.`);\n  } else if (!skip) {\n    for (let i of mtx) {\n      i = validateColorComponents(i, {\n        maxLength: TRIA,\n        validateRange: false\n      });\n    }\n  }\n  const [\n    [r1c1, r1c2, r1c3],\n    [r2c1, r2c2, r2c3],\n    [r3c1, r3c2, r3c3]\n  ] = mtx;\n  let v1, v2, v3;\n  if (skip) {\n    [v1, v2, v3] = vct;\n  } else {\n    [v1, v2, v3] = validateColorComponents(vct, {\n      maxLength: TRIA,\n      validateRange: false\n    });\n  }\n  const p1 = r1c1 * v1 + r1c2 * v2 + r1c3 * v3;\n  const p2 = r2c1 * v1 + r2c2 * v2 + r2c3 * v3;\n  const p3 = r3c1 * v1 + r3c2 * v2 + r3c3 * v3;\n  return [p1, p2, p3];\n};\n\n/**\n * normalize color components\n * @param {Array} colorA - array of color components [v1, v2, v3, v4]\n * @param {Array} colorB - array of color components [v1, v2, v3, v4]\n * @param {boolean} skip - skip validate\n * @returns {Array.<Array.<number>>} - [colorA, colorB]\n */\nexport const normalizeColorComponents = (colorA, colorB, skip = false) => {\n  if (!Array.isArray(colorA)) {\n    throw new TypeError(`${colorA} is not an array.`);\n  } else if (colorA.length !== QUAT) {\n    throw new Error(`Unexpected array length ${colorA.length}.`);\n  }\n  if (!Array.isArray(colorB)) {\n    throw new TypeError(`${colorB} is not an array.`);\n  } else if (colorB.length !== QUAT) {\n    throw new Error(`Unexpected array length ${colorB.length}.`);\n  }\n  let i = 0;\n  while (i < QUAT) {\n    if (colorA[i] === NONE && colorB[i] === NONE) {\n      colorA[i] = 0;\n      colorB[i] = 0;\n    } else if (colorA[i] === NONE) {\n      colorA[i] = colorB[i];\n    } else if (colorB[i] === NONE) {\n      colorB[i] = colorA[i];\n    }\n    i++;\n  }\n  if (!skip) {\n    colorA = validateColorComponents(colorA, {\n      minLength: QUAT,\n      validateRange: false\n    });\n    colorB = validateColorComponents(colorB, {\n      minLength: QUAT,\n      validateRange: false\n    });\n  }\n  return [colorA, colorB];\n};\n\n/**\n * number to hex string\n * @param {number} value - color value\n * @returns {string} - hex string\n */\nexport const numberToHexString = value => {\n  if (!Number.isFinite(value)) {\n    throw new TypeError(`${value} is not a number.`);\n  } else {\n    value = Math.round(value);\n    if (value < 0 || value > MAX_RGB) {\n      throw new RangeError(`${value} is not between 0 and ${MAX_RGB}.`);\n    }\n  }\n  let hex = value.toString(HEX);\n  if (hex.length === 1) {\n    hex = `0${hex}`;\n  }\n  return hex;\n};\n\n/**\n * angle to deg\n * @param {string} angle - angle\n * @returns {number} - deg: 0..360\n */\nexport const angleToDeg = angle => {\n  if (isString(angle)) {\n    angle = angle.trim();\n  } else {\n    throw new TypeError(`${angle} is not a string.`);\n  }\n  const GRAD = DEG / 400;\n  const RAD = DEG / (Math.PI * DUO);\n  const reg = new RegExp(`^(${NUM})(${ANGLE})?$`);\n  if (!reg.test(angle)) {\n    throw new SyntaxError(`Invalid property value: ${angle}`);\n  }\n  const [, val, unit] = angle.match(reg);\n  const value = val[0] === '.' ? `0${val}` : val;\n  let deg;\n  switch (unit) {\n    case 'grad':\n      deg = parseFloat(value) * GRAD;\n      break;\n    case 'rad':\n      deg = parseFloat(value) * RAD;\n      break;\n    case 'turn':\n      deg = parseFloat(value) * DEG;\n      break;\n    default:\n      deg = parseFloat(value);\n  }\n  deg %= DEG;\n  if (deg < 0) {\n    deg += DEG;\n  } else if (Object.is(deg, -0)) {\n    deg = 0;\n  }\n  return deg;\n};\n\n/**\n * parse alpha\n * @param {?string} [alpha] - alpha value\n * @returns {number} - alpha: 0..1\n */\nexport const parseAlpha = alpha => {\n  if (isString(alpha)) {\n    alpha = alpha.trim();\n    if (!alpha) {\n      alpha = 1;\n    } else if (alpha === NONE) {\n      alpha = 0;\n    } else {\n      if (alpha[0] === '.') {\n        alpha = `0${alpha}`;\n      }\n      if (alpha.endsWith('%')) {\n        alpha = parseFloat(alpha) / MAX_PCT;\n      } else {\n        alpha = parseFloat(alpha);\n      }\n      if (!Number.isFinite(alpha)) {\n        throw new TypeError(`${alpha} is not a number.`);\n      }\n      if (alpha < PPTH) {\n        alpha = 0;\n      } else if (alpha > 1) {\n        alpha = 1;\n      } else {\n        alpha = parseFloat(alpha.toFixed(3));\n      }\n    }\n  } else {\n    alpha = 1;\n  }\n  return alpha;\n};\n\n/**\n * parse hex alpha\n * @param {string} value - alpha value in hex string\n * @returns {number} - alpha: 0..1\n */\nexport const parseHexAlpha = value => {\n  if (isString(value)) {\n    if (value === '') {\n      throw new SyntaxError('Invalid property value: (empty string)');\n    }\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  let alpha = parseInt(value, HEX);\n  if (alpha <= 0) {\n    return 0;\n  }\n  if (alpha >= MAX_RGB) {\n    return 1;\n  }\n  const alphaMap = new Map();\n  for (let i = 1; i < MAX_PCT; i++) {\n    alphaMap.set(Math.round(i * MAX_RGB / MAX_PCT), i);\n  }\n  if (alphaMap.has(alpha)) {\n    alpha = alphaMap.get(alpha) / MAX_PCT;\n  } else {\n    alpha = Math.round(alpha / MAX_RGB / PPTH) * PPTH;\n  }\n  return parseFloat(alpha.toFixed(3));\n};\n\n/**\n * convert rgb to linear rgb\n * @param {Array.<number>} rgb - [r, g, b] r|g|b: 0..255\n * @param {boolean} skip - skip validate\n * @returns {Array.<number>} - [r, g, b] r|g|b: 0..1\n */\nexport const convertRgbToLinearRgb = (rgb, skip = false) => {\n  let rr, gg, bb;\n  if (skip) {\n    [rr, gg, bb] = rgb;\n  } else {\n    [rr, gg, bb] = validateColorComponents(rgb, {\n      maxLength: TRIA,\n      maxRange: MAX_RGB\n    });\n  }\n  let r = rr / MAX_RGB;\n  let g = gg / MAX_RGB;\n  let b = bb / MAX_RGB;\n  const COND_POW = 0.04045;\n  if (r > COND_POW) {\n    r = Math.pow((r + LINEAR_OFFSET) / (1 + LINEAR_OFFSET), POW_LINEAR);\n  } else {\n    r /= LINEAR_COEF;\n  }\n  if (g > COND_POW) {\n    g = Math.pow((g + LINEAR_OFFSET) / (1 + LINEAR_OFFSET), POW_LINEAR);\n  } else {\n    g /= LINEAR_COEF;\n  }\n  if (b > COND_POW) {\n    b = Math.pow((b + LINEAR_OFFSET) / (1 + LINEAR_OFFSET), POW_LINEAR);\n  } else {\n    b /= LINEAR_COEF;\n  }\n  return [r, g, b];\n};\n\n/**\n * convert rgb to xyz\n * @param {Array.<number>} rgb - [r, g, b, ?alpha] r|g|b: 0..255 alpha: 0..1\n * @param {boolean} skip - skip validate\n * @returns {Array.<number>} - [x, y, z, alpha]\n */\nexport const convertRgbToXyz = (rgb, skip = false) => {\n  let r, g, b, alpha;\n  if (skip) {\n    [r, g, b, alpha] = rgb;\n  } else {\n    [r, g, b, alpha] = validateColorComponents(rgb, {\n      alpha: true,\n      maxRange: MAX_RGB\n    });\n  }\n  const [rr, gg, bb] = convertRgbToLinearRgb([r, g, b], true);\n  const [x, y, z] = transformMatrix(MATRIX_L_RGB_TO_XYZ, [rr, gg, bb], true);\n  return [x, y, z, alpha];\n};\n\n/**\n * convert rgb to xyz-d50\n * @param {Array.<number>} rgb - [r, g, b, ?alpha] r|g|b: 0..255 alpha: 0..1\n * @returns {Array.<number>} - [x, y, z, alpha]\n */\nexport const convertRgbToXyzD50 = rgb => {\n  const [xx, yy, zz, alpha] = convertRgbToXyz(rgb);\n  const [x, y, z] = transformMatrix(MATRIX_D65_TO_D50, [xx, yy, zz], true);\n  return [x, y, z, alpha];\n};\n\n/**\n * convert rgb to hex color\n * @param {Array.<number>} rgb - [r, g, b, alpha] r|g|b: 0..255 alpha: 0..1\n * @returns {string} - hex color\n */\nexport const convertRgbToHex = rgb => {\n  const [r, g, b, alpha] = validateColorComponents(rgb, {\n    alpha: true,\n    maxRange: MAX_RGB\n  });\n  const rr = numberToHexString(r);\n  const gg = numberToHexString(g);\n  const bb = numberToHexString(b);\n  const aa = numberToHexString(alpha * MAX_RGB);\n  let hex;\n  if (aa === 'ff') {\n    hex = `#${rr}${gg}${bb}`;\n  } else {\n    hex = `#${rr}${gg}${bb}${aa}`;\n  }\n  return hex;\n};\n\n/**\n * convert linear rgb to rgb\n * @param {Array.<number>} rgb - [r, g, b] r|g|b: 0..1\n * @param {boolean} round - round result\n * @returns {Array.<number>} - [r, g, b] r|g|b: 0..255\n */\nexport const convertLinearRgbToRgb = (rgb, round = false) => {\n  let [r, g, b] = validateColorComponents(rgb, {\n    maxLength: TRIA\n  });\n  const COND_POW = 809 / 258400;\n  if (r > COND_POW) {\n    r = Math.pow(r, 1 / POW_LINEAR) * (1 + LINEAR_OFFSET) - LINEAR_OFFSET;\n  } else {\n    r *= LINEAR_COEF;\n  }\n  r *= MAX_RGB;\n  if (g > COND_POW) {\n    g = Math.pow(g, 1 / POW_LINEAR) * (1 + LINEAR_OFFSET) - LINEAR_OFFSET;\n  } else {\n    g *= LINEAR_COEF;\n  }\n  g *= MAX_RGB;\n  if (b > COND_POW) {\n    b = Math.pow(b, 1 / POW_LINEAR) * (1 + LINEAR_OFFSET) - LINEAR_OFFSET;\n  } else {\n    b *= LINEAR_COEF;\n  }\n  b *= MAX_RGB;\n  return [\n    round ? Math.round(r) : r,\n    round ? Math.round(g) : g,\n    round ? Math.round(b) : b\n  ];\n};\n\n/**\n * convert linear rgb to hex color\n * @param {Array.<number>} rgb - [r, g, b, alpha] r|g|b|alpha: 0..1\n * @param {boolean} skip - skip validate\n * @returns {string} - hex color\n */\nexport const convertLinearRgbToHex = (rgb, skip = false) => {\n  let r, g, b, alpha;\n  if (skip) {\n    [r, g, b, alpha] = rgb;\n  } else {\n    [r, g, b, alpha] = validateColorComponents(rgb, {\n      minLength: QUAT\n    });\n  }\n  [r, g, b] = convertLinearRgbToRgb([r, g, b], true);\n  const rr = numberToHexString(r);\n  const gg = numberToHexString(g);\n  const bb = numberToHexString(b);\n  const aa = numberToHexString(alpha * MAX_RGB);\n  let hex;\n  if (aa === 'ff') {\n    hex = `#${rr}${gg}${bb}`;\n  } else {\n    hex = `#${rr}${gg}${bb}${aa}`;\n  }\n  return hex;\n};\n\n/**\n * convert xyz to hex color\n * @param {Array.<number>} xyz - [x, y, z, alpha]\n * @returns {string} - hex color\n */\nexport const convertXyzToHex = xyz => {\n  const [x, y, z, alpha] = validateColorComponents(xyz, {\n    minLength: QUAT,\n    validateRange: false\n  });\n  const [r, g, b] = transformMatrix(MATRIX_XYZ_TO_L_RGB, [x, y, z], true);\n  const hex = convertLinearRgbToHex([\n    Math.min(Math.max(r, 0), 1),\n    Math.min(Math.max(g, 0), 1),\n    Math.min(Math.max(b, 0), 1),\n    alpha\n  ], true);\n  return hex;\n};\n\n/**\n * convert xyz D50 to hex color\n * @param {Array.<number>} xyz - [x, y, z, alpha]\n * @returns {string} - hex color\n */\nexport const convertXyzD50ToHex = xyz => {\n  const [x, y, z, alpha] = validateColorComponents(xyz, {\n    minLength: QUAT,\n    validateRange: false\n  });\n  const xyzD65 = transformMatrix(MATRIX_D50_TO_D65, [x, y, z], true);\n  const [r, g, b] = transformMatrix(MATRIX_XYZ_TO_L_RGB, xyzD65, true);\n  const hex = convertLinearRgbToHex([\n    Math.min(Math.max(r, 0), 1),\n    Math.min(Math.max(g, 0), 1),\n    Math.min(Math.max(b, 0), 1),\n    alpha\n  ]);\n  return hex;\n};\n\n/**\n * convert xyz to rgb\n * @param {Array.<number>} xyz - [x, y, z, alpha]\n * @param {boolean} skip - skip validate\n * @returns {Array.<number>} - [r, g, b, alpha] r|g|b: 0..255 alpha: 0..1\n */\nexport const convertXyzToRgb = (xyz, skip = false) => {\n  let x, y, z, alpha;\n  if (skip) {\n    [x, y, z, alpha] = xyz;\n  } else {\n    [x, y, z, alpha] = validateColorComponents(xyz, {\n      validateRange: false\n    });\n  }\n  let [r, g, b] = transformMatrix(MATRIX_XYZ_TO_L_RGB, [x, y, z], true);\n  [r, g, b] = convertLinearRgbToRgb([\n    Math.min(Math.max(r, 0), 1),\n    Math.min(Math.max(g, 0), 1),\n    Math.min(Math.max(b, 0), 1)\n  ], true);\n  return [r, g, b, alpha];\n};\n\n/**\n * convert xyz to xyz-d50\n * @param {Array.<number>} xyz - [x, y, z, alpha]\n * @returns {Array.<number>} - [x, y, z, alpha]\n */\nexport const convertXyzToXyzD50 = xyz => {\n  const [xx, yy, zz, alpha] = validateColorComponents(xyz, {\n    validateRange: false\n  });\n  const [x, y, z] = transformMatrix(MATRIX_D65_TO_D50, [xx, yy, zz], true);\n  return [x, y, z, alpha];\n};\n\n/**\n * convert xyz to hsl\n * @param {Array.<number>} xyz - [x, y, z, alpha]\n * @param {boolean} skip - skip validate\n * @returns {Array.<number>} - [h, s, l, alpha]\n */\nexport const convertXyzToHsl = (xyz, skip = false) => {\n  const [rr, gg, bb, alpha] = convertXyzToRgb(xyz, skip);\n  const r = rr / MAX_RGB;\n  const g = gg / MAX_RGB;\n  const b = bb / MAX_RGB;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const d = max - min;\n  const l = (max + min) * HALF * MAX_PCT;\n  let h, s;\n  if (Math.round(l) === 0 || Math.round(l) === MAX_PCT) {\n    h = NONE;\n    s = NONE;\n  } else {\n    s = d / (1 - Math.abs(max + min - 1)) * MAX_PCT;\n    if (s === 0) {\n      h = NONE;\n    } else {\n      switch (max) {\n        case r:\n          h = (g - b) / d;\n          break;\n        case g:\n          h = (b - r) / d + DUO;\n          break;\n        case b:\n        default:\n          h = (r - g) / d + QUAT;\n          break;\n      }\n      h = h * SEXA % DEG;\n      if (h < 0) {\n        h += DEG;\n      }\n    }\n  }\n  return [h, s, l, alpha];\n};\n\n/**\n * convert xyz to hwb\n * @param {Array.<number>} xyz - [x, y, z, alpha]\n * @param {boolean} skip - skip validate\n * @returns {Array.<number>} - [h, w, b, alpha]\n */\nexport const convertXyzToHwb = (xyz, skip = false) => {\n  const [r, g, b, alpha] = convertXyzToRgb(xyz, skip);\n  const w = Math.min(r, g, b) / MAX_RGB;\n  const bk = 1 - Math.max(r, g, b) / MAX_RGB;\n  let h;\n  if (w + bk === 1) {\n    h = NONE;\n  } else {\n    [h] = convertXyzToHsl(xyz);\n  }\n  return [\n    h,\n    w * MAX_PCT,\n    bk * MAX_PCT,\n    alpha\n  ];\n};\n\n/**\n * convert xyz to oklab\n * @param {Array.<number>} xyz - [x, y, z, alpha]\n * @param {boolean} skip - skip validate\n * @returns {Array.<number>} - [l, a, b, alpha]\n */\nexport const convertXyzToOklab = (xyz, skip = false) => {\n  let x, y, z, alpha;\n  if (skip) {\n    [x, y, z, alpha] = xyz;\n  } else {\n    [x, y, z, alpha] = validateColorComponents(xyz, {\n      validateRange: false\n    });\n  }\n  const lms = transformMatrix(MATRIX_XYZ_TO_LMS, [x, y, z], true);\n  const xyzLms = lms.map(c => Math.cbrt(c));\n  let [l, a, b] = transformMatrix(MATRIX_LMS_TO_OKLAB, xyzLms, true);\n  l = Math.min(Math.max(l, 0), 1);\n  const lPct = Math.round(parseFloat(l.toFixed(QUAT)) * MAX_PCT);\n  if (lPct === 0 || lPct === MAX_PCT) {\n    a = NONE;\n    b = NONE;\n  }\n  return [l, a, b, alpha];\n};\n\n/**\n * convert xyz to oklch\n * @param {Array.<number>} xyz - [x, y, z, alpha]\n * @param {boolean} skip - skip validate\n * @returns {Array.<number>} - [l, c, h, alpha]\n */\nexport const convertXyzToOklch = (xyz, skip = false) => {\n  const [l, a, b, aa] = convertXyzToOklab(xyz, skip);\n  let c, h;\n  const lPct = Math.round(parseFloat(l.toFixed(QUAT)) * MAX_PCT);\n  if (lPct === 0 || lPct === MAX_PCT) {\n    c = NONE;\n    h = NONE;\n  } else {\n    c =\n      Math.max(Math.sqrt(Math.pow(a, POW_SQR) + Math.pow(b, POW_SQR)), 0);\n    if (parseFloat(c.toFixed(QUAT)) === 0) {\n      h = NONE;\n    } else {\n      h = Math.atan2(b, a) * DEG * HALF / Math.PI;\n      if (h < 0) {\n        h += DEG;\n      }\n    }\n  }\n  return [l, c, h, aa];\n};\n\n/**\n * convert xyz D50 to rgb\n * @param {Array.<number>} xyz - [x, y, z, alpha]\n * @param {boolean} skip - skip validate\n * @returns {Array.<number>} - [r, g, b, alpha] r|g|b: 0..255 alpha: 0..1\n */\nexport const convertXyzD50ToRgb = (xyz, skip = false) => {\n  let x, y, z, alpha;\n  if (skip) {\n    [x, y, z, alpha] = xyz;\n  } else {\n    [x, y, z, alpha] = validateColorComponents(xyz, {\n      minLength: QUAT,\n      validateRange: false\n    });\n  }\n  const xyzD65 = transformMatrix(MATRIX_D50_TO_D65, [x, y, z], true);\n  const [r, g, b] = convertXyzToRgb(xyzD65, true);\n  return [r, g, b, alpha];\n};\n\n/**\n * convert xyz-d50 to lab\n * @param {Array.<number>} xyz - [x, y, z, a]\n * @param {boolean} skip - skip validate\n * @returns {Array.<number>} - [l, a, b, alpha]\n */\nexport const convertXyzD50ToLab = (xyz, skip = false) => {\n  let x, y, z, alpha;\n  if (skip) {\n    [x, y, z, alpha] = xyz;\n  } else {\n    [x, y, z, alpha] = validateColorComponents(xyz, {\n      validateRange: false\n    });\n  }\n  const xyzD50 = [x, y, z].map((val, i) => val / D50[i]);\n  const [f0, f1, f2] = xyzD50.map(val => val > LAB_EPSILON\n    ? Math.cbrt(val)\n    : (val * LAB_KAPPA + HEX) / LAB_L\n  );\n  const l = Math.min(Math.max((LAB_L * f1) - HEX, 0), MAX_PCT);\n  let a, b;\n  if (l === 0 || l === MAX_PCT) {\n    a = NONE;\n    b = NONE;\n  } else {\n    a = (f0 - f1) * LAB_A;\n    b = (f1 - f2) * LAB_B;\n  }\n  return [l, a, b, alpha];\n};\n\n/**\n * convert xyz-d50 to lch\n * @param {Array.<number>} xyz - [x, y, z, alpha]\n * @param {boolean} skip - skip validate\n * @returns {Array.<number>} - [l, c, h, alpha]\n */\nexport const convertXyzD50ToLch = (xyz, skip = false) => {\n  const [l, a, b, alpha] = convertXyzD50ToLab(xyz, skip);\n  let c, h;\n  if (l === 0 || l === MAX_PCT) {\n    c = NONE;\n    h = NONE;\n  } else {\n    c = Math.max(Math.sqrt(Math.pow(a, POW_SQR) + Math.pow(b, POW_SQR)), 0);\n    h = Math.atan2(b, a) * DEG * HALF / Math.PI;\n    if (h < 0) {\n      h += DEG;\n    }\n  }\n  return [l, c, h, alpha];\n};\n\n/**\n * convert hex color to rgb\n * @param {string} value - color value\n * @returns {Array.<number>} - [r, g, b, alpha] r|g|b: 0..255 alpha: 0..1\n */\nexport const convertHexToRgb = value => {\n  if (isString(value)) {\n    value = value.toLowerCase().trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  if (!(/^#[\\da-f]{6}$/.test(value) || /^#[\\da-f]{3}$/.test(value) ||\n        /^#[\\da-f]{8}$/.test(value) || /^#[\\da-f]{4}$/.test(value))) {\n    throw new SyntaxError(`Invalid property value: ${value}`);\n  }\n  const arr = [];\n  if (/^#[\\da-f]{6}$/.test(value)) {\n    const [, r, g, b] = value.match(/^#([\\da-f]{2})([\\da-f]{2})([\\da-f]{2})$/);\n    arr.push(\n      parseInt(r, HEX),\n      parseInt(g, HEX),\n      parseInt(b, HEX),\n      1\n    );\n  } else if (/^#[\\da-f]{3}$/.test(value)) {\n    const [, r, g, b] = value.match(/^#([\\da-f])([\\da-f])([\\da-f])$/);\n    arr.push(\n      parseInt(`${r}${r}`, HEX),\n      parseInt(`${g}${g}`, HEX),\n      parseInt(`${b}${b}`, HEX),\n      1\n    );\n  } else if (/^#[\\da-f]{8}$/.test(value)) {\n    const [, r, g, b, alpha] =\n      value.match(/^#([\\da-f]{2})([\\da-f]{2})([\\da-f]{2})([\\da-f]{2})$/);\n    arr.push(\n      parseInt(r, HEX),\n      parseInt(g, HEX),\n      parseInt(b, HEX),\n      parseHexAlpha(alpha)\n    );\n  } else if (/^#[\\da-f]{4}$/.test(value)) {\n    const [, r, g, b, alpha] =\n      value.match(/^#([\\da-f])([\\da-f])([\\da-f])([\\da-f])$/);\n    arr.push(\n      parseInt(`${r}${r}`, HEX),\n      parseInt(`${g}${g}`, HEX),\n      parseInt(`${b}${b}`, HEX),\n      parseHexAlpha(`${alpha}${alpha}`)\n    );\n  }\n  return arr;\n};\n\n/**\n * convert hex color to linear rgb\n * @param {string} value - color value\n * @returns {Array.<number>} - [r, g, b, alpha] r|g|b|alpha: 0..1\n */\nexport const convertHexToLinearRgb = value => {\n  const [rr, gg, bb, alpha] = convertHexToRgb(value);\n  const [r, g, b] = convertRgbToLinearRgb([rr, gg, bb], true);\n  return [r, g, b, alpha];\n};\n\n/**\n * convert hex color to xyz\n * @param {string} value - color value\n * @returns {Array.<number>} - [x, y, z, alpha]\n */\nexport const convertHexToXyz = value => {\n  const [r, g, b, alpha] = convertHexToLinearRgb(value);\n  const [x, y, z] = transformMatrix(MATRIX_L_RGB_TO_XYZ, [r, g, b], true);\n  return [x, y, z, alpha];\n};\n\n/**\n * parse rgb()\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {string} [opt.format] - output format\n * @returns {Array.<string|number>|string} - ['rgb', r, g, b, alpha], '(empty)'\n */\nexport const parseRgb = (value, opt = {}) => {\n  if (isString(value)) {\n    value = value.toLowerCase().trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  const reg = new RegExp(`^rgba?\\\\(\\\\s*(${SYN_MOD}|${SYN_RGB_LV3})\\\\s*\\\\)$`);\n  if (!reg.test(value)) {\n    switch (format) {\n      case VAL_MIX: {\n        return null;\n      }\n      case VAL_SPEC: {\n        return '';\n      }\n      default: {\n        return ['rgb', 0, 0, 0, 0];\n      }\n    }\n  }\n  const [, val] = value.match(reg);\n  let [v1, v2, v3, v4] = val.replace(/[,/]/g, ' ').split(/\\s+/);\n  let r, g, b;\n  if (v1 === NONE) {\n    r = 0;\n  } else {\n    if (v1[0] === '.') {\n      v1 = `0${v1}`;\n    }\n    if (v1.endsWith('%')) {\n      r = parseFloat(v1) * MAX_RGB / MAX_PCT;\n    } else {\n      r = parseFloat(v1);\n    }\n    r = Math.min(Math.max(roundToPrecision(r, OCT), 0), MAX_RGB);\n  }\n  if (v2 === NONE) {\n    g = 0;\n  } else {\n    if (v2[0] === '.') {\n      v2 = `0${v2}`;\n    }\n    if (v2.endsWith('%')) {\n      g = parseFloat(v2) * MAX_RGB / MAX_PCT;\n    } else {\n      g = parseFloat(v2);\n    }\n    g = Math.min(Math.max(roundToPrecision(g, OCT), 0), MAX_RGB);\n  }\n  if (v3 === NONE) {\n    b = 0;\n  } else {\n    if (v3[0] === '.') {\n      v3 = `0${v3}`;\n    }\n    if (v3.endsWith('%')) {\n      b = parseFloat(v3) * MAX_RGB / MAX_PCT;\n    } else {\n      b = parseFloat(v3);\n    }\n    b = Math.min(Math.max(roundToPrecision(b, OCT), 0), MAX_RGB);\n  }\n  const alpha = parseAlpha(v4);\n  return [\n    'rgb',\n    r,\n    g,\n    b,\n    format === VAL_MIX && v4 === NONE ? NONE : alpha\n  ];\n};\n\n/**\n * parse hsl()\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {string} [opt.format] - output format\n * @returns {Array.<string|number>|?string}\n *   - ['rgb', r, g, b, alpha], '(empty)', null\n */\nexport const parseHsl = (value, opt = {}) => {\n  if (isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  if (!REG_HSL.test(value)) {\n    switch (format) {\n      case 'hsl':\n      case VAL_MIX: {\n        return null;\n      }\n      case VAL_SPEC: {\n        return '';\n      }\n      default: {\n        return ['rgb', 0, 0, 0, 0];\n      }\n    }\n  }\n  const [, val] = value.match(REG_HSL);\n  let [h, s, l, alpha] = val.replace(/[,/]/g, ' ').split(/\\s+/);\n  if (h === NONE) {\n    if (format !== 'hsl') {\n      h = 0;\n    }\n  } else {\n    h = angleToDeg(h);\n  }\n  if (s === NONE) {\n    if (format !== 'hsl') {\n      s = 0;\n    }\n  } else {\n    if (s[0] === '.') {\n      s = `0${s}`;\n    }\n    s = Math.min(Math.max(parseFloat(s), 0), MAX_PCT);\n  }\n  if (l === NONE) {\n    if (format !== 'hsl') {\n      l = 0;\n    }\n  } else {\n    if (l[0] === '.') {\n      l = `0${l}`;\n    }\n    l = Math.min(Math.max(parseFloat(l), 0), MAX_PCT);\n  }\n  if (alpha !== NONE || format !== 'hsl') {\n    alpha = parseAlpha(alpha);\n  }\n  if (format === 'hsl') {\n    return [format, h, s, l, alpha];\n  }\n  const ll = l / MAX_PCT;\n  const sa = s / MAX_PCT * Math.min(ll, 1 - ll);\n  const rk = (h / DEG * DOZ) % DOZ;\n  const gk = (8 + h / DEG * DOZ) % DOZ;\n  const bk = (4 + h / DEG * DOZ) % DOZ;\n  const r =\n    ll - sa * Math.max(-1, Math.min(rk - TRIA, TRIA ** POW_SQR - rk, 1));\n  const g =\n    ll - sa * Math.max(-1, Math.min(gk - TRIA, TRIA ** POW_SQR - gk, 1));\n  const b =\n    ll - sa * Math.max(-1, Math.min(bk - TRIA, TRIA ** POW_SQR - bk, 1));\n  return [\n    'rgb',\n    Math.min(Math.max(roundToPrecision(r * MAX_RGB, OCT), 0), MAX_RGB),\n    Math.min(Math.max(roundToPrecision(g * MAX_RGB, OCT), 0), MAX_RGB),\n    Math.min(Math.max(roundToPrecision(b * MAX_RGB, OCT), 0), MAX_RGB),\n    alpha\n  ];\n};\n\n/**\n * parse hwb()\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {string} [opt.format] - output format\n * @returns {Array.<string|number>|?string}\n *   - ['rgb', r, g, b, alpha], '(empty)', null\n */\nexport const parseHwb = (value, opt = {}) => {\n  if (isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  if (!REG_HWB.test(value)) {\n    switch (format) {\n      case 'hwb':\n      case VAL_MIX: {\n        return null;\n      }\n      case VAL_SPEC: {\n        return '';\n      }\n      default: {\n        return ['rgb', 0, 0, 0, 0];\n      }\n    }\n  }\n  const [, val] = value.match(REG_HWB);\n  let [h, w, b, alpha] = val.replace('/', ' ').split(/\\s+/);\n  if (h === NONE) {\n    if (format !== 'hwb') {\n      h = 0;\n    }\n  } else {\n    h = angleToDeg(h);\n  }\n  if (w === NONE) {\n    if (format !== 'hwb') {\n      w = 0;\n    }\n  } else {\n    if (w[0] === '.') {\n      w = `0${w}`;\n    }\n    w = Math.min(Math.max(parseFloat(w), 0), MAX_PCT) / MAX_PCT;\n  }\n  if (b === NONE) {\n    if (format !== 'hwb') {\n      b = 0;\n    }\n  } else {\n    if (b[0] === '.') {\n      b = `0${b}`;\n    }\n    b = Math.min(Math.max(parseFloat(b), 0), MAX_PCT) / MAX_PCT;\n  }\n  if (alpha !== NONE || format !== 'hwb') {\n    alpha = parseAlpha(alpha);\n  }\n  if (format === 'hwb') {\n    return [\n      format,\n      h,\n      w === NONE ? w : w * MAX_PCT,\n      b === NONE ? b : b * MAX_PCT,\n      alpha\n    ];\n  }\n  if (w + b >= 1) {\n    const v = roundToPrecision(w / (w + b) * MAX_RGB, OCT);\n    return ['rgb', v, v, v, alpha];\n  }\n  const factor = (1 - w - b) / MAX_RGB;\n  let [, rr, gg, bb] = parseHsl(`hsl(${h} 100 50)`);\n  rr = roundToPrecision((rr * factor + w) * MAX_RGB, OCT);\n  gg = roundToPrecision((gg * factor + w) * MAX_RGB, OCT);\n  bb = roundToPrecision((bb * factor + w) * MAX_RGB, OCT);\n  return [\n    'rgb',\n    Math.min(Math.max(rr, 0), MAX_RGB),\n    Math.min(Math.max(gg, 0), MAX_RGB),\n    Math.min(Math.max(bb, 0), MAX_RGB),\n    alpha\n  ];\n};\n\n/**\n + parse lab()\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {string} [opt.format] - output format\n * @returns {Array.<string|number>|?string}\n *   - [xyz-d50, x, y, z, alpha], ['lab', l, a, b, alpha], '(empty)', null\n */\nexport const parseLab = (value, opt = {}) => {\n  if (isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  if (!REG_LAB.test(value)) {\n    switch (format) {\n      case VAL_MIX: {\n        return null;\n      }\n      case VAL_SPEC: {\n        return '';\n      }\n      default: {\n        return ['rgb', 0, 0, 0, 0];\n      }\n    }\n  }\n  const COEF_PCT = 1.25;\n  const COND_POW = 8;\n  const [, val] = value.match(REG_LAB);\n  let [l, a, b, alpha] = val.replace('/', ' ').split(/\\s+/);\n  if (l === NONE) {\n    if (!REG_SPEC.test(format)) {\n      l = 0;\n    }\n  } else {\n    if (l[0] === '.') {\n      l = `0${l}`;\n    }\n    if (l.endsWith('%')) {\n      l = parseFloat(l);\n      if (l > MAX_PCT) {\n        l = MAX_PCT;\n      }\n    } else {\n      l = parseFloat(l);\n    }\n    if (l < 0) {\n      l = 0;\n    }\n  }\n  if (a === NONE) {\n    if (!REG_SPEC.test(format)) {\n      a = 0;\n    }\n  } else {\n    if (a[0] === '.') {\n      a = `0${a}`;\n    }\n    if (a.endsWith('%')) {\n      a = parseFloat(a) * COEF_PCT;\n    } else {\n      a = parseFloat(a);\n    }\n  }\n  if (b === NONE) {\n    if (!REG_SPEC.test(format)) {\n      b = 0;\n    }\n  } else {\n    if (b.endsWith('%')) {\n      b = parseFloat(b) * COEF_PCT;\n    } else {\n      b = parseFloat(b);\n    }\n  }\n  if (alpha !== NONE || !REG_SPEC.test(format)) {\n    alpha = parseAlpha(alpha);\n  }\n  if (REG_SPEC.test(format)) {\n    return [\n      'lab',\n      l === NONE ? l : roundToPrecision(l, HEX),\n      a === NONE ? a : roundToPrecision(a, HEX),\n      b === NONE ? b : roundToPrecision(b, HEX),\n      alpha\n    ];\n  }\n  const fl = (l + HEX) / LAB_L;\n  const fa = (a / LAB_A + fl);\n  const fb = (fl - b / LAB_B);\n  const powFl = Math.pow(fl, POW_CUBE);\n  const powFa = Math.pow(fa, POW_CUBE);\n  const powFb = Math.pow(fb, POW_CUBE);\n  const xyz = [\n    powFa > LAB_EPSILON ? powFa : (fa * LAB_L - HEX) / LAB_KAPPA,\n    l > COND_POW ? powFl : l / LAB_KAPPA,\n    powFb > LAB_EPSILON ? powFb : (fb * LAB_L - HEX) / LAB_KAPPA\n  ];\n  const [x, y, z] = xyz.map((val, i) => val * D50[i]);\n  return ['xyz-d50',\n    roundToPrecision(x, HEX),\n    roundToPrecision(y, HEX),\n    roundToPrecision(z, HEX),\n    alpha\n  ];\n};\n\n/**\n + parse lch()\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {string} [opt.format] - output format\n * @returns {Array.<string|number>|?string}\n *   - ['xyz-d50', x, y, z, alpha], ['lch', l, c, h, alpha], '(empty)', null\n */\nexport const parseLch = (value, opt = {}) => {\n  if (isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  if (!REG_LCH.test(value)) {\n    switch (format) {\n      case VAL_MIX: {\n        return null;\n      }\n      case VAL_SPEC: {\n        return '';\n      }\n      default: {\n        return ['rgb', 0, 0, 0, 0];\n      }\n    }\n  }\n  const COEF_PCT = 1.5;\n  const [, val] = value.match(REG_LCH);\n  let [l, c, h, alpha] = val.replace('/', ' ').split(/\\s+/);\n  if (l === NONE) {\n    if (!REG_SPEC.test(format)) {\n      l = 0;\n    }\n  } else {\n    if (l[0] === '.') {\n      l = `0${l}`;\n    }\n    l = parseFloat(l);\n    if (l < 0) {\n      l = 0;\n    }\n  }\n  if (c === NONE) {\n    if (!REG_SPEC.test(format)) {\n      c = 0;\n    }\n  } else {\n    if (c[0] === '.') {\n      c = `0${c}`;\n    }\n    if (c.endsWith('%')) {\n      c = parseFloat(c) * COEF_PCT;\n    } else {\n      c = parseFloat(c);\n    }\n  }\n  if (h === NONE) {\n    if (!REG_SPEC.test(format)) {\n      h = 0;\n    }\n  } else {\n    h = angleToDeg(h);\n  }\n  if (alpha !== NONE || !REG_SPEC.test(format)) {\n    alpha = parseAlpha(alpha);\n  }\n  if (REG_SPEC.test(format)) {\n    return [\n      'lch',\n      l === NONE ? l : roundToPrecision(l, HEX),\n      c === NONE ? c : roundToPrecision(c, HEX),\n      h === NONE ? h : roundToPrecision(h, HEX),\n      alpha\n    ];\n  }\n  const a = c * Math.cos(h * Math.PI / (DEG * HALF));\n  const b = c * Math.sin(h * Math.PI / (DEG * HALF));\n  const [, x, y, z] = parseLab(`lab(${l} ${a} ${b})`);\n  return [\n    'xyz-d50',\n    roundToPrecision(x, HEX),\n    roundToPrecision(y, HEX),\n    roundToPrecision(z, HEX),\n    alpha\n  ];\n};\n\n/**\n * parse oklab()\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {string} [opt.format] - output format\n * @returns {Array.<string|number>|?string}\n *   - ['xyz-d65', x, y, z, alpha], ['oklab', l, a, b, alpha], '(empty)', null\n */\nexport const parseOklab = (value, opt = {}) => {\n  if (isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  if (!REG_OKLAB.test(value)) {\n    switch (format) {\n      case VAL_MIX: {\n        return null;\n      }\n      case VAL_SPEC: {\n        return '';\n      }\n      default: {\n        return ['rgb', 0, 0, 0, 0];\n      }\n    }\n  }\n  const COEF_PCT = 0.4;\n  const [, val] = value.match(REG_OKLAB);\n  let [l, a, b, alpha] = val.replace('/', ' ').split(/\\s+/);\n  if (l === NONE) {\n    if (!REG_SPEC.test(format)) {\n      l = 0;\n    }\n  } else {\n    if (l[0] === '.') {\n      l = `0${l}`;\n    }\n    if (l.endsWith('%')) {\n      l = parseFloat(l) / MAX_PCT;\n    } else {\n      l = parseFloat(l);\n    }\n    if (l < 0) {\n      l = 0;\n    }\n  }\n  if (a === NONE) {\n    if (!REG_SPEC.test(format)) {\n      a = 0;\n    }\n  } else {\n    if (a[0] === '.') {\n      a = `0${a}`;\n    }\n    if (a.endsWith('%')) {\n      a = parseFloat(a) * COEF_PCT / MAX_PCT;\n    } else {\n      a = parseFloat(a);\n    }\n  }\n  if (b === NONE) {\n    if (!REG_SPEC.test(format)) {\n      b = 0;\n    }\n  } else {\n    if (b.endsWith('%')) {\n      b = parseFloat(b) * COEF_PCT / MAX_PCT;\n    } else {\n      b = parseFloat(b);\n    }\n  }\n  if (alpha !== NONE || !REG_SPEC.test(format)) {\n    alpha = parseAlpha(alpha);\n  }\n  if (REG_SPEC.test(format)) {\n    return [\n      'oklab',\n      l === NONE ? l : roundToPrecision(l, HEX),\n      a === NONE ? a : roundToPrecision(a, HEX),\n      b === NONE ? b : roundToPrecision(b, HEX),\n      alpha\n    ];\n  }\n  const lms = transformMatrix(MATRIX_OKLAB_TO_LMS, [l, a, b]);\n  const xyzLms = lms.map(c => Math.pow(c, POW_CUBE));\n  const [x, y, z] = transformMatrix(MATRIX_LMS_TO_XYZ, xyzLms, true);\n  return [\n    'xyz-d65',\n    roundToPrecision(x, HEX),\n    roundToPrecision(y, HEX),\n    roundToPrecision(z, HEX),\n    alpha\n  ];\n};\n\n/**\n * parse oklch()\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {string} [opt.format] - output format\n * @returns {Array.<string|number>|?string}\n *   - ['xyz-d65', x, y, z, alpha], ['oklch', l, c, h, alpha], '(empty)', null\n */\nexport const parseOklch = (value, opt = {}) => {\n  if (isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  if (!REG_OKLCH.test(value)) {\n    switch (format) {\n      case VAL_MIX: {\n        return null;\n      }\n      case VAL_SPEC: {\n        return '';\n      }\n      default: {\n        return ['rgb', 0, 0, 0, 0];\n      }\n    }\n  }\n  const COEF_PCT = 0.4;\n  const [, val] = value.match(REG_OKLCH);\n  let [l, c, h, alpha] = val.replace('/', ' ').split(/\\s+/);\n  if (l === NONE) {\n    if (!REG_SPEC.test(format)) {\n      l = 0;\n    }\n  } else {\n    if (l[0] === '.') {\n      l = `0${l}`;\n    }\n    if (l.endsWith('%')) {\n      l = parseFloat(l) / MAX_PCT;\n    } else {\n      l = parseFloat(l);\n    }\n    if (l < 0) {\n      l = 0;\n    }\n  }\n  if (c === NONE) {\n    if (!REG_SPEC.test(format)) {\n      c = 0;\n    }\n  } else {\n    if (c[0] === '.') {\n      c = `0${c}`;\n    }\n    if (c.endsWith('%')) {\n      c = parseFloat(c) * COEF_PCT / MAX_PCT;\n    } else {\n      c = parseFloat(c);\n    }\n    if (c < 0) {\n      c = 0;\n    }\n  }\n  if (h === NONE) {\n    if (!REG_SPEC.test(format)) {\n      h = 0;\n    }\n  } else {\n    h = angleToDeg(h);\n  }\n  if (alpha !== NONE || !REG_SPEC.test(format)) {\n    alpha = parseAlpha(alpha);\n  }\n  if (REG_SPEC.test(format)) {\n    return [\n      'oklch',\n      l === NONE ? l : roundToPrecision(l, HEX),\n      c === NONE ? c : roundToPrecision(c, HEX),\n      h === NONE ? h : roundToPrecision(h, HEX),\n      alpha\n    ];\n  }\n  const a = c * Math.cos(h * Math.PI / (DEG * HALF));\n  const b = c * Math.sin(h * Math.PI / (DEG * HALF));\n  const lms = transformMatrix(MATRIX_OKLAB_TO_LMS, [l, a, b]);\n  const xyzLms = lms.map(cl => Math.pow(cl, POW_CUBE));\n  const [x, y, z] = transformMatrix(MATRIX_LMS_TO_XYZ, xyzLms, true);\n  return [\n    'xyz-d65',\n    roundToPrecision(x, HEX),\n    roundToPrecision(y, HEX),\n    roundToPrecision(z, HEX),\n    alpha\n  ];\n};\n\n/**\n * parse color()\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {string} [opt.colorSpace] - color space\n * @param {boolean} [opt.d50] - xyz in d50 white point\n * @param {string} [opt.format] - output format\n * @returns {Array.<string|number>|?string}\n *   - ['xyz-(d50|d65)', x, y, z, alpha], [cs, r, g, b, alpha], '(empty)', null\n */\nexport const parseColorFunc = (value, opt = {}) => {\n  if (isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { colorSpace, d50, format } = opt;\n  if (!REG_FN_COLOR.test(value)) {\n    switch (format) {\n      case VAL_MIX: {\n        return null;\n      }\n      case VAL_SPEC: {\n        return '';\n      }\n      default: {\n        return ['rgb', 0, 0, 0, 0];\n      }\n    }\n  }\n  const [, val] = value.match(REG_FN_COLOR);\n  let [cs, v1, v2, v3, v4] = val.replace('/', ' ').split(/\\s+/);\n  let r, g, b;\n  if (cs === 'xyz') {\n    cs = 'xyz-d65';\n  }\n  if (v1 === NONE) {\n    r = 0;\n  } else {\n    if (v1[0] === '.') {\n      v1 = `0${v1}`;\n    }\n    r = v1.endsWith('%') ? parseFloat(v1) / MAX_PCT : parseFloat(v1);\n  }\n  if (v2 === NONE) {\n    g = 0;\n  } else {\n    if (v2[0] === '.') {\n      v2 = `0${v2}`;\n    }\n    g = v2.endsWith('%') ? parseFloat(v2) / MAX_PCT : parseFloat(v2);\n  }\n  if (v3 === NONE) {\n    b = 0;\n  } else {\n    if (v3[0] === '.') {\n      v3 = `0${v3}`;\n    }\n    b = v3.endsWith('%') ? parseFloat(v3) / MAX_PCT : parseFloat(v3);\n  }\n  const alpha = parseAlpha(v4);\n  if (REG_SPEC.test(format) || (format === VAL_MIX && cs === colorSpace)) {\n    return [\n      cs,\n      v1 === NONE ? NONE : roundToPrecision(r, DEC),\n      v2 === NONE ? NONE : roundToPrecision(g, DEC),\n      v3 === NONE ? NONE : roundToPrecision(b, DEC),\n      v4 === NONE ? NONE : alpha\n    ];\n  }\n  let x, y, z;\n  // srgb\n  if (cs === 'srgb') {\n    [x, y, z] = convertRgbToXyz([r * MAX_RGB, g * MAX_RGB, b * MAX_RGB]);\n    if (d50) {\n      [x, y, z] = transformMatrix(MATRIX_D65_TO_D50, [x, y, z], true);\n    }\n  // srgb-linear\n  } else if (cs === 'srgb-linear') {\n    [x, y, z] = transformMatrix(MATRIX_L_RGB_TO_XYZ, [r, g, b]);\n    if (d50) {\n      [x, y, z] = transformMatrix(MATRIX_D65_TO_D50, [x, y, z], true);\n    }\n  // display-p3\n  } else if (cs === 'display-p3') {\n    const linearRgb = convertRgbToLinearRgb([\n      r * MAX_RGB,\n      g * MAX_RGB,\n      b * MAX_RGB\n    ]);\n    [x, y, z] = transformMatrix(MATRIX_P3_TO_XYZ, linearRgb);\n    if (d50) {\n      [x, y, z] = transformMatrix(MATRIX_D65_TO_D50, [x, y, z], true);\n    }\n  // rec2020\n  } else if (cs === 'rec2020') {\n    const ALPHA = 1.09929682680944;\n    const BETA = 0.018053968510807;\n    const REC_COEF = 0.45;\n    const rgb = [r, g, b].map(c => {\n      let cl;\n      if (c < BETA * REC_COEF * DEC) {\n        cl = c / (REC_COEF * DEC);\n      } else {\n        cl = Math.pow((c + ALPHA - 1) / ALPHA, 1 / REC_COEF);\n      }\n      return cl;\n    });\n    [x, y, z] = transformMatrix(MATRIX_REC2020_TO_XYZ, rgb);\n    if (d50) {\n      [x, y, z] = transformMatrix(MATRIX_D65_TO_D50, [x, y, z], true);\n    }\n  // a98-rgb\n  } else if (cs === 'a98-rgb') {\n    const POW_A98 = 563 / 256;\n    const rgb = [r, g, b].map(c => {\n      const cl = Math.pow(c, POW_A98);\n      return cl;\n    });\n    [x, y, z] = transformMatrix(MATRIX_A98_TO_XYZ, rgb);\n    if (d50) {\n      [x, y, z] = transformMatrix(MATRIX_D65_TO_D50, [x, y, z], true);\n    }\n  // prophoto-rgb\n  } else if (cs === 'prophoto-rgb') {\n    const POW_PROPHOTO = 1.8;\n    const rgb = [r, g, b].map(c => {\n      let cl;\n      if (c > 1 / (HEX * DUO)) {\n        cl = Math.pow(c, POW_PROPHOTO);\n      } else {\n        cl = c / HEX;\n      }\n      return cl;\n    });\n    [x, y, z] = transformMatrix(MATRIX_PROPHOTO_TO_XYZ_D50, rgb);\n    if (!d50) {\n      [x, y, z] = transformMatrix(MATRIX_D50_TO_D65, [x, y, z], true);\n    }\n  // xyz, xyz-d50, xyz-d65\n  } else if (/^xyz(?:-d(?:50|65))?$/.test(cs)) {\n    [x, y, z] = [r, g, b];\n    if (cs === 'xyz-d50') {\n      if (!d50) {\n        [x, y, z] = transformMatrix(MATRIX_D50_TO_D65, [x, y, z]);\n      }\n    } else if (d50) {\n      [x, y, z] = transformMatrix(MATRIX_D65_TO_D50, [x, y, z], true);\n    }\n  }\n  return [\n    d50 ? 'xyz-d50' : 'xyz-d65',\n    roundToPrecision(x, HEX),\n    roundToPrecision(y, HEX),\n    roundToPrecision(z, HEX),\n    format === VAL_MIX && v4 === NONE ? NONE : alpha\n  ];\n};\n\n/**\n * parse color value\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {boolean} [opt.d50] - xyz in d50 white point\n * @param {string} [opt.format] - output format\n * @returns {Array.<string|number>|?string}\n *   - ['xyz-(d50|d65)', x, y, z, alpha], ['rgb', r, g, b, alpha]\n *   - value, '(empty)', null\n */\nexport const parseColorValue = (value, opt = {}) => {\n  if (isString(value)) {\n    value = value.toLowerCase().trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { d50, format } = opt;\n  // unknown color and/or invalid color\n  if (!REG_COLOR.test(value)) {\n    switch (format) {\n      case VAL_MIX: {\n        return null;\n      }\n      case VAL_SPEC: {\n        return '';\n      }\n      default: {\n        return ['rgb', 0, 0, 0, 0];\n      }\n    }\n  }\n  let x, y, z, alpha;\n  // complement currentcolor as a missing color\n  if (REG_CURRENT.test(value)) {\n    if (format === VAL_COMP) {\n      return ['rgb', 0, 0, 0, 0];\n    }\n    if (format === VAL_SPEC) {\n      return value;\n    }\n    x = 0;\n    y = 0;\n    z = 0;\n    alpha = 0;\n  // named-color\n  } else if (/^[a-z]+$/.test(value)) {\n    if (Object.prototype.hasOwnProperty.call(NAMED_COLORS, value)) {\n      if (format === VAL_SPEC) {\n        return value;\n      }\n      const [r, g, b] = NAMED_COLORS[value];\n      alpha = 1;\n      if (format === VAL_COMP) {\n        return ['rgb', r, g, b, alpha];\n      }\n      [x, y, z] = convertRgbToXyz([r, g, b], true);\n      if (d50) {\n        [x, y, z] = transformMatrix(MATRIX_D65_TO_D50, [x, y, z], true);\n      }\n    } else {\n      if (format === VAL_COMP) {\n        return ['rgb', 0, 0, 0, 0];\n      }\n      if (format === VAL_SPEC) {\n        if (value === 'transparent') {\n          return value;\n        }\n        return '';\n      }\n      if (format === VAL_MIX) {\n        if (value === 'transparent') {\n          return ['rgb', 0, 0, 0, 0];\n        }\n        return null;\n      }\n      x = 0;\n      y = 0;\n      z = 0;\n      alpha = 0;\n    }\n  // hex-color\n  } else if (value[0] === '#') {\n    if (REG_SPEC.test(format)) {\n      const rgb = convertHexToRgb(value);\n      return ['rgb', ...rgb];\n    }\n    [x, y, z, alpha] = convertHexToXyz(value);\n    if (d50) {\n      [x, y, z] = transformMatrix(MATRIX_D65_TO_D50, [x, y, z], true);\n    }\n  // lab()\n  } else if (value.startsWith('lab')) {\n    if (REG_SPEC.test(format)) {\n      return parseLab(value, opt);\n    }\n    [, x, y, z, alpha] = parseLab(value);\n    if (!d50) {\n      [x, y, z] = transformMatrix(MATRIX_D50_TO_D65, [x, y, z], true);\n    }\n  // lch()\n  } else if (value.startsWith('lch')) {\n    if (REG_SPEC.test(format)) {\n      return parseLch(value, opt);\n    }\n    [, x, y, z, alpha] = parseLch(value);\n    if (!d50) {\n      [x, y, z] = transformMatrix(MATRIX_D50_TO_D65, [x, y, z], true);\n    }\n  // oklab()\n  } else if (value.startsWith('oklab')) {\n    if (REG_SPEC.test(format)) {\n      return parseOklab(value, opt);\n    }\n    [, x, y, z, alpha] = parseOklab(value);\n    if (d50) {\n      [x, y, z] = transformMatrix(MATRIX_D65_TO_D50, [x, y, z], true);\n    }\n  // oklch()\n  } else if (value.startsWith('oklch')) {\n    if (REG_SPEC.test(format)) {\n      return parseOklch(value, opt);\n    }\n    [, x, y, z, alpha] = parseOklch(value);\n    if (d50) {\n      [x, y, z] = transformMatrix(MATRIX_D65_TO_D50, [x, y, z], true);\n    }\n  } else {\n    let r, g, b;\n    // hsl()\n    if (value.startsWith('hsl')) {\n      [, r, g, b, alpha] = parseHsl(value);\n    // hwb()\n    } else if (value.startsWith('hwb')) {\n      [, r, g, b, alpha] = parseHwb(value);\n    // rgb()\n    } else {\n      [, r, g, b, alpha] = parseRgb(value, opt);\n    }\n    if (REG_SPEC.test(format)) {\n      return [\n        'rgb',\n        Math.round(r),\n        Math.round(g),\n        Math.round(b),\n        alpha\n      ];\n    }\n    [x, y, z] = convertRgbToXyz([r, g, b]);\n    if (d50) {\n      [x, y, z] = transformMatrix(MATRIX_D65_TO_D50, [x, y, z], true);\n    }\n  }\n  return [\n    d50 ? 'xyz-d50' : 'xyz-d65',\n    roundToPrecision(x, HEX),\n    roundToPrecision(y, HEX),\n    roundToPrecision(z, HEX),\n    alpha\n  ];\n};\n\n/**\n * resolve color value\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {string} [opt.colorSpace] - color space\n * @param {string} [opt.format] - output format\n * @returns {Array.<string|number>|?string}\n *   - [cs, v1, v2, v3, alpha], value, '(empty)', null\n */\nexport const resolveColorValue = (value, opt = {}) => {\n  if (isString(value)) {\n    value = value.toLowerCase().trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { colorSpace, format } = opt;\n  // unknown color and/or invalid color\n  if (!REG_COLOR.test(value)) {\n    switch (format) {\n      case VAL_MIX: {\n        return null;\n      }\n      case VAL_SPEC: {\n        return '';\n      }\n      default: {\n        return ['rgb', 0, 0, 0, 0];\n      }\n    }\n  }\n  let cs, r, g, b, alpha;\n  // complement currentcolor as a missing color\n  if (REG_CURRENT.test(value)) {\n    if (format === VAL_SPEC) {\n      return value;\n    }\n    r = 0;\n    g = 0;\n    b = 0;\n    alpha = 0;\n  // named-color\n  } else if (/^[a-z]+$/.test(value)) {\n    if (Object.prototype.hasOwnProperty.call(NAMED_COLORS, value)) {\n      if (format === VAL_SPEC) {\n        return value;\n      }\n      [r, g, b] = NAMED_COLORS[value];\n      alpha = 1;\n    } else {\n      if (format === VAL_SPEC) {\n        if (value === 'transparent') {\n          return value;\n        }\n        return '';\n      }\n      if (format === VAL_MIX) {\n        if (value === 'transparent') {\n          return ['rgb', 0, 0, 0, 0];\n        }\n        return null;\n      }\n      r = 0;\n      g = 0;\n      b = 0;\n      alpha = 0;\n    }\n  // hex-color\n  } else if (value[0] === '#') {\n    [r, g, b, alpha] = convertHexToRgb(value);\n  // rgb()\n  } else if (value.startsWith('rgb')) {\n    [, r, g, b, alpha] = parseRgb(value, opt);\n  // hsl()\n  } else if (value.startsWith('hsl')) {\n    [, r, g, b, alpha] = parseHsl(value, opt);\n  // hwb()\n  } else if (value.startsWith('hwb')) {\n    [, r, g, b, alpha] = parseHwb(value, opt);\n  // lab(), lch()\n  } else if (/^l(?:ab|ch)/.test(value)) {\n    let x, y, z;\n    if (value.startsWith('lab')) {\n      [cs, x, y, z, alpha] = parseLab(value, opt);\n    } else {\n      [cs, x, y, z, alpha] = parseLch(value, opt);\n    }\n    if (REG_SPEC.test(format)) {\n      return [cs, x, y, z, alpha];\n    }\n    [r, g, b, alpha] = convertXyzD50ToRgb([x, y, z, alpha]);\n  // oklab(), oklch()\n  } else if (/^okl(?:ab|ch)/.test(value)) {\n    let x, y, z;\n    if (value.startsWith('oklab')) {\n      [cs, x, y, z, alpha] = parseOklab(value, opt);\n    } else {\n      [cs, x, y, z, alpha] = parseOklch(value, opt);\n    }\n    if (REG_SPEC.test(format)) {\n      return [cs, x, y, z, alpha];\n    }\n    [r, g, b, alpha] = convertXyzToRgb([x, y, z, alpha]);\n  }\n  if (format === VAL_MIX && colorSpace === 'srgb') {\n    return [\n      'srgb',\n      r / MAX_RGB,\n      g / MAX_RGB,\n      b / MAX_RGB,\n      alpha\n    ];\n  }\n  return [\n    'rgb',\n    Math.round(r),\n    Math.round(g),\n    Math.round(b),\n    alpha\n  ];\n};\n\n/**\n * resolve color()\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {string} [opt.colorSpace] - color space\n * @param {string} [opt.format] - output format\n * @returns {Array.<string|number>|?string}\n *   - [cs, v1, v2, v3, alpha], '(empty)', null\n */\nexport const resolveColorFunc = (value, opt = {}) => {\n  if (isString(value)) {\n    value = value.toLowerCase().trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { colorSpace, format } = opt;\n  if (!REG_FN_COLOR.test(value)) {\n    switch (format) {\n      case VAL_MIX: {\n        return null;\n      }\n      case VAL_SPEC: {\n        return '';\n      }\n      default: {\n        return ['rgb', 0, 0, 0, 0];\n      }\n    }\n  }\n  const [cs, x, y, z, alpha] = parseColorFunc(value, opt);\n  if (REG_SPEC.test(format)) {\n    return [cs, x, y, z, alpha];\n  }\n  let r, g, b;\n  if (format === VAL_MIX) {\n    if (cs === colorSpace) {\n      return [\n        cs,\n        x === NONE ? x : x,\n        y === NONE ? y : y,\n        z === NONE ? z : z,\n        alpha\n      ];\n    }\n    [r, g, b] = convertXyzToRgb([x, y, z], true);\n  } else {\n    [r, g, b] = convertXyzToRgb([x, y, z], true);\n  }\n  return ['rgb', r, g, b, alpha];\n};\n\n/**\n * convert color value to linear rgb\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {string} [opt.colorSpace] - color space\n * @param {string} [opt.format] - output format\n * @returns {Array.<number>} - [r, g, b, alpha] r|g|b|alpha: 0..1\n */\nexport const convertColorToLinearRgb = (value, opt = {}) => {\n  if (isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { colorSpace, format } = opt;\n  let cs, r, g, b, alpha, x, y, z;\n  if (format === VAL_MIX) {\n    let xyz;\n    if (value.startsWith(FN_COLOR)) {\n      xyz = parseColorFunc(value, opt);\n    } else {\n      xyz = parseColorValue(value, opt);\n    }\n    if (xyz === null) {\n      return xyz;\n    }\n    [cs, x, y, z, alpha] = xyz;\n    if (cs === colorSpace) {\n      return [x, y, z, alpha];\n    }\n    [r, g, b] = transformMatrix(MATRIX_XYZ_TO_L_RGB, [x, y, z], true);\n  } else if (value.startsWith(FN_COLOR)) {\n    const [, val] = value.match(REG_FN_COLOR);\n    const [cs] = val.replace('/', ' ').split(/\\s+/);\n    if (cs === 'srgb-linear') {\n      [, r, g, b, alpha] = resolveColorFunc(value, {\n        format: VAL_COMP\n      });\n    } else {\n      [, x, y, z, alpha] = parseColorFunc(value);\n      [r, g, b] = transformMatrix(MATRIX_XYZ_TO_L_RGB, [x, y, z], true);\n    }\n  } else {\n    [, x, y, z, alpha] = parseColorValue(value);\n    [r, g, b] = transformMatrix(MATRIX_XYZ_TO_L_RGB, [x, y, z], true);\n  }\n  return [\n    Math.min(Math.max(r, 0), 1),\n    Math.min(Math.max(g, 0), 1),\n    Math.min(Math.max(b, 0), 1),\n    alpha\n  ];\n};\n\n/**\n * convert color value to rgb\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {string} [opt.format] - output format\n * @returns {Array.<number>} - [r, g, b, alpha] r|g|b: 0..255 alpha: 0..1\n */\nexport const convertColorToRgb = (value, opt = {}) => {\n  if (isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  let r, g, b, alpha;\n  if (format === VAL_MIX) {\n    let rgb;\n    if (value.startsWith(FN_COLOR)) {\n      rgb = resolveColorFunc(value, opt);\n    } else {\n      rgb = resolveColorValue(value, opt);\n    }\n    if (rgb === null) {\n      return rgb;\n    }\n    [, r, g, b, alpha] = rgb;\n  } else if (value.startsWith(FN_COLOR)) {\n    const [, val] = value.match(REG_FN_COLOR);\n    const [cs] = val.replace('/', ' ').split(/\\s+/);\n    if (cs === 'srgb') {\n      [, r, g, b, alpha] = resolveColorFunc(value, {\n        format: VAL_COMP\n      });\n      r *= MAX_RGB;\n      g *= MAX_RGB;\n      b *= MAX_RGB;\n    } else {\n      [, r, g, b, alpha] = resolveColorFunc(value);\n    }\n  } else if (/^(?:ok)?l(?:ab|ch)/.test(value)) {\n    [r, g, b, alpha] = convertColorToLinearRgb(value);\n    [r, g, b] = convertLinearRgbToRgb([r, g, b]);\n  } else {\n    [, r, g, b, alpha] = resolveColorValue(value, {\n      format: VAL_COMP\n    });\n  }\n  return [r, g, b, alpha];\n};\n\n/**\n * convert color value to xyz\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {boolean} [opt.d50] - xyz in d50 white point\n * @param {string} [opt.format] - output format\n * @returns {Array.<number>} - [x, y, z, alpha]\n */\nexport const convertColorToXyz = (value, opt = {}) => {\n  if (isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { d50, format } = opt;\n  let x, y, z, alpha;\n  if (format === VAL_MIX) {\n    let xyz;\n    if (value.startsWith(FN_COLOR)) {\n      xyz = parseColorFunc(value, opt);\n    } else {\n      xyz = parseColorValue(value, opt);\n    }\n    if (xyz === null) {\n      return xyz;\n    }\n    [, x, y, z, alpha] = xyz;\n  } else if (value.startsWith(FN_COLOR)) {\n    const [, val] = value.match(REG_FN_COLOR);\n    const [cs] = val.replace('/', ' ').split(/\\s+/);\n    if (d50) {\n      if (cs === 'xyz-d50') {\n        [, x, y, z, alpha] = resolveColorFunc(value, {\n          format: VAL_COMP\n        });\n      } else {\n        [, x, y, z, alpha] = parseColorFunc(value, opt);\n      }\n    } else if (/^xyz(?:-d65)?$/.test(cs)) {\n      [, x, y, z, alpha] = resolveColorFunc(value, {\n        format: VAL_COMP\n      });\n    } else {\n      [, x, y, z, alpha] = parseColorFunc(value);\n    }\n  } else {\n    [, x, y, z, alpha] = parseColorValue(value, opt);\n  }\n  return [x, y, z, alpha];\n};\n\n/**\n * convert color value to hsl\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {string} [opt.format] - output format\n * @returns {Array.<number>} - [h, s, l, alpha]\n */\nexport const convertColorToHsl = (value, opt = {}) => {\n  if (isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  let h, s, l, alpha, x, y, z;\n  if (REG_HSL.test(value)) {\n    [, h, s, l, alpha] = parseHsl(value, {\n      format: 'hsl'\n    });\n    if (format === 'hsl') {\n      return [\n        Math.round(h),\n        Math.round(s),\n        Math.round(l),\n        alpha\n      ];\n    }\n    return [h, s, l, alpha];\n  }\n  if (format === VAL_MIX) {\n    let xyz;\n    if (value.startsWith(FN_COLOR)) {\n      xyz = parseColorFunc(value, opt);\n    } else {\n      xyz = parseColorValue(value, opt);\n    }\n    if (xyz === null) {\n      return xyz;\n    }\n    [, x, y, z, alpha] = xyz;\n  } else if (value.startsWith(FN_COLOR)) {\n    [, x, y, z, alpha] = parseColorFunc(value);\n  } else {\n    [, x, y, z, alpha] = parseColorValue(value);\n  }\n  [h, s, l] = convertXyzToHsl([x, y, z], true);\n  if (format === 'hsl') {\n    return [\n      Math.round(h),\n      Math.round(s),\n      Math.round(l),\n      alpha\n    ];\n  }\n  return [h, s, l, alpha];\n};\n\n/**\n * convert color value to hwb\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {string} [opt.format] - output format\n * @returns {Array.<number>} - [h, w, b, alpha]\n */\nexport const convertColorToHwb = (value, opt = {}) => {\n  if (isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  let h, w, b, alpha, x, y, z;\n  if (REG_HWB.test(value)) {\n    [, h, w, b, alpha] = parseHwb(value, {\n      format: 'hwb'\n    });\n    if (format === 'hwb') {\n      return [\n        Math.round(h),\n        Math.round(w),\n        Math.round(b),\n        alpha\n      ];\n    }\n    return [h, w, b, alpha];\n  }\n  if (format === VAL_MIX) {\n    let xyz;\n    if (value.startsWith(FN_COLOR)) {\n      xyz = parseColorFunc(value, opt);\n    } else {\n      xyz = parseColorValue(value, opt);\n    }\n    if (xyz === null) {\n      return xyz;\n    }\n    [, x, y, z, alpha] = xyz;\n  } else if (value.startsWith(FN_COLOR)) {\n    [, x, y, z, alpha] = parseColorFunc(value);\n  } else {\n    [, x, y, z, alpha] = parseColorValue(value);\n  }\n  [h, w, b] = convertXyzToHwb([x, y, z], true);\n  if (format === 'hwb') {\n    return [\n      Math.round(h),\n      Math.round(w),\n      Math.round(b),\n      alpha\n    ];\n  }\n  return [h, w, b, alpha];\n};\n\n/**\n * convert color value to lab\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {string} [opt.format] - output format\n * @returns {Array.<number>} - [l, a, b, alpha]\n */\nexport const convertColorToLab = (value, opt = {}) => {\n  if (isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  let l, a, b, alpha, x, y, z;\n  if (REG_LAB.test(value)) {\n    [, l, a, b, alpha] = parseLab(value, {\n      format: VAL_COMP\n    });\n    return [l, a, b, alpha];\n  }\n  if (format === VAL_MIX) {\n    let xyz;\n    opt.d50 = true;\n    if (value.startsWith(FN_COLOR)) {\n      xyz = parseColorFunc(value, opt);\n    } else {\n      xyz = parseColorValue(value, opt);\n    }\n    if (xyz === null) {\n      return xyz;\n    }\n    [, x, y, z, alpha] = xyz;\n  } else if (value.startsWith(FN_COLOR)) {\n    [, x, y, z, alpha] = parseColorFunc(value, {\n      d50: true\n    });\n  } else {\n    [, x, y, z, alpha] = parseColorValue(value, {\n      d50: true\n    });\n  }\n  [l, a, b] = convertXyzD50ToLab([x, y, z], true);\n  return [l, a, b, alpha];\n};\n\n/**\n * convert color value to lch\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {string} [opt.format] - output format\n * @returns {Array.<number>} - [l, c, h, alpha]\n */\nexport const convertColorToLch = (value, opt = {}) => {\n  if (isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  let l, c, h, alpha, x, y, z;\n  if (REG_LCH.test(value)) {\n    [, l, c, h, alpha] = parseLch(value, {\n      format: VAL_COMP\n    });\n    return [l, c, h, alpha];\n  }\n  if (format === VAL_MIX) {\n    let xyz;\n    opt.d50 = true;\n    if (value.startsWith(FN_COLOR)) {\n      xyz = parseColorFunc(value, opt);\n    } else {\n      xyz = parseColorValue(value, opt);\n    }\n    if (xyz === null) {\n      return xyz;\n    }\n    [, x, y, z, alpha] = xyz;\n  } else if (value.startsWith(FN_COLOR)) {\n    [, x, y, z, alpha] = parseColorFunc(value, {\n      d50: true\n    });\n  } else {\n    [, x, y, z, alpha] = parseColorValue(value, {\n      d50: true\n    });\n  }\n  [l, c, h] = convertXyzD50ToLch([x, y, z], true);\n  return [l, c, h, alpha];\n};\n\n/**\n * convert color value to oklab\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {string} [opt.format] - output format\n * @returns {Array.<number>} - [l, a, b, alpha]\n */\nexport const convertColorToOklab = (value, opt = {}) => {\n  if (isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  let l, a, b, alpha, x, y, z;\n  if (REG_OKLAB.test(value)) {\n    [, l, a, b, alpha] = parseOklab(value, {\n      format: VAL_COMP\n    });\n    return [l, a, b, alpha];\n  }\n  if (format === VAL_MIX) {\n    let xyz;\n    if (value.startsWith(FN_COLOR)) {\n      xyz = parseColorFunc(value, opt);\n    } else {\n      xyz = parseColorValue(value, opt);\n    }\n    if (xyz === null) {\n      return xyz;\n    }\n    [, x, y, z, alpha] = xyz;\n  } else if (value.startsWith(FN_COLOR)) {\n    [, x, y, z, alpha] = parseColorFunc(value);\n  } else {\n    [, x, y, z, alpha] = parseColorValue(value);\n  }\n  [l, a, b] = convertXyzToOklab([x, y, z], true);\n  return [l, a, b, alpha];\n};\n\n/**\n * convert color value to oklch\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {string} [opt.format] - output format\n * @returns {Array.<number>} - [l, c, h, alpha]\n */\nexport const convertColorToOklch = (value, opt = {}) => {\n  if (isString(value)) {\n    value = value.trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  let l, c, h, alpha, x, y, z;\n  if (REG_OKLCH.test(value)) {\n    [, l, c, h, alpha] = parseOklch(value, {\n      format: VAL_COMP\n    });\n    return [l, c, h, alpha];\n  }\n  if (format === VAL_MIX) {\n    let xyz;\n    if (value.startsWith(FN_COLOR)) {\n      xyz = parseColorFunc(value, opt);\n    } else {\n      xyz = parseColorValue(value, opt);\n    }\n    if (xyz === null) {\n      return xyz;\n    }\n    [, x, y, z, alpha] = xyz;\n  } else if (value.startsWith(FN_COLOR)) {\n    [, x, y, z, alpha] = parseColorFunc(value);\n  } else {\n    [, x, y, z, alpha] = parseColorValue(value);\n  }\n  [l, c, h] = convertXyzToOklch([x, y, z], true);\n  return [l, c, h, alpha];\n};\n\n/**\n * resolve color-mix()\n * @param {string} value - color value\n * @param {object} [opt] - options\n * @param {string} [opt.format] format - output format\n * @returns {Array.<string|number>|?string}\n *   - [cs, v1, v2, v3, alpha], '(empty)', null\n */\nexport const resolveColorMix = (value, opt = {}) => {\n  if (isString(value)) {\n    value = value.toLowerCase().trim();\n  } else {\n    throw new TypeError(`${value} is not a string.`);\n  }\n  const { format } = opt;\n  const nestedItems = [];\n  if (!REG_MIX.test(value)) {\n    if (value.startsWith(FN_MIX) && REG_MIX_NEST.test(value)) {\n      const regColorSpace = new RegExp(`^(?:${CS_RGB}|${CS_XYZ})$`);\n      const items = value.match(REG_MIX_NEST);\n      for (const item of items) {\n        let val = resolveColorMix(item, {\n          format: format === VAL_SPEC ? format : VAL_COMP\n        });\n        // computed value\n        if (Array.isArray(val)) {\n          const [v1, v2, v3, v4, v5] = val;\n          if (v2 === 0 && v3 === 0 && v4 === 0 && v5 === 0) {\n            value = '';\n            break;\n          }\n          if (regColorSpace.test(v1)) {\n            if (v5 === 1) {\n              val = `color(${v1} ${v2} ${v3} ${v4})`;\n            } else {\n              val = `color(${v1} ${v2} ${v3} ${v4} / ${v5})`;\n            }\n          } else if (v5 === 1) {\n            val = `${v1}(${v2} ${v3} ${v4})`;\n          } else {\n            val = `${v1}(${v2} ${v3} ${v4} / ${v5})`;\n          }\n        } else if (!REG_MIX.test(val)) {\n          value = '';\n          break;\n        }\n        nestedItems.push(val);\n        value = value.replace(item, val);\n      }\n      if (!value) {\n        if (format === VAL_SPEC) {\n          return '';\n        }\n        return ['rgb', 0, 0, 0, 0];\n      }\n    } else if (format === VAL_SPEC) {\n      return '';\n    } else {\n      return ['rgb', 0, 0, 0, 0];\n    }\n  }\n  let colorSpace, hueArc, colorA, pctA, colorB, pctB;\n  if (nestedItems.length && format === VAL_SPEC) {\n    const regColorSpace = new RegExp(`^color-mix\\\\(\\\\s*in\\\\s+(${CS_MIX})\\\\s*,`);\n    const [, cs] = value.match(regColorSpace);\n    if (REG_CS_HUE.test(cs)) {\n      [, colorSpace, hueArc] = REG_CS_HUE.exec(cs);\n    } else {\n      colorSpace = cs;\n    }\n    if (nestedItems.length === 2) {\n      const itemA = nestedItems[0].replace(/(?=[()])/g, '\\\\');\n      const regA = new RegExp(`(${itemA})(?:\\\\s+(${PCT}))?`);\n      if (regA.test(value)) {\n        [, colorA, pctA] = value.match(regA);\n      }\n      const itemB = nestedItems[1].replace(/(?=[()])/g, '\\\\');\n      const regB = new RegExp(`(${itemB})(?:\\\\s+(${PCT}))?`);\n      if (regB.test(value)) {\n        [, colorB, pctB] = value.match(regB);\n      }\n    } else {\n      const colorPart = `(?:${SYN_COLOR_TYPE})(?:\\\\s+${PCT})?`;\n      const item = nestedItems[0].replace(/(?=[()])/g, '\\\\');\n      const itemPart = `${item}(?:\\\\s+${PCT})?`;\n      const itemPartCapt = `(${item})(?:\\\\s+(${PCT}))?`;\n      const regColorPart = new RegExp(`^(${SYN_COLOR_TYPE})(?:\\\\s+(${PCT}))?$`);\n      const regItemPart = new RegExp(`^${itemPartCapt}$`);\n      const regPosition = new RegExp(`${itemPartCapt}\\\\s*\\\\)$`);\n      // item is at the end\n      if (regPosition.test(value)) {\n        const reg = new RegExp(`(${colorPart})\\\\s*,\\\\s*(${itemPart})\\\\s*\\\\)$`);\n        const [, colorPartA, colorPartB] = value.match(reg);\n        [, colorA, pctA] = colorPartA.match(regColorPart);\n        [, colorB, pctB] = colorPartB.match(regItemPart);\n      } else {\n        const reg = new RegExp(`(${itemPart})\\\\s*,\\\\s*(${colorPart})\\\\s*\\\\)$`);\n        const [, colorPartA, colorPartB] = value.match(reg);\n        [, colorA, pctA] = colorPartA.match(regItemPart);\n        [, colorB, pctB] = colorPartB.match(regColorPart);\n      }\n    }\n  } else {\n    const [, cs, colorPartA, colorPartB] = value.match(REG_MIX_CAPT);\n    const reg = new RegExp(`^(${SYN_COLOR_TYPE})(?:\\\\s+(${PCT}))?$`);\n    [, colorA, pctA] = colorPartA.match(reg);\n    [, colorB, pctB] = colorPartB.match(reg);\n    if (REG_CS_HUE.test(cs)) {\n      [, colorSpace, hueArc] = REG_CS_HUE.exec(cs);\n    } else {\n      colorSpace = cs;\n    }\n  }\n  // normalize percentages and set multipler\n  let pA, pB, m;\n  if (pctA && pctB) {\n    const p1 = parseFloat(pctA) / MAX_PCT;\n    const p2 = parseFloat(pctB) / MAX_PCT;\n    if (p1 < 0 || p1 > 1 || p2 < 0 || p2 > 1) {\n      if (format === VAL_SPEC) {\n        return '';\n      }\n      return ['rgb', 0, 0, 0, 0];\n    }\n    const factor = p1 + p2;\n    if (factor === 0) {\n      if (format === VAL_SPEC) {\n        return '';\n      }\n      return ['rgb', 0, 0, 0, 0];\n    }\n    pA = p1 / factor;\n    pB = p2 / factor;\n    m = factor < 1 ? factor : 1;\n  } else {\n    if (pctA) {\n      pA = parseFloat(pctA) / MAX_PCT;\n      if (pA < 0 || pA > 1) {\n        if (format === VAL_SPEC) {\n          return '';\n        }\n        return ['rgb', 0, 0, 0, 0];\n      }\n      pB = 1 - pA;\n    } else if (pctB) {\n      pB = parseFloat(pctB) / MAX_PCT;\n      if (pB < 0 || pB > 1) {\n        if (format === VAL_SPEC) {\n          return '';\n        }\n        return ['rgb', 0, 0, 0, 0];\n      }\n      pA = 1 - pB;\n    } else {\n      pA = HALF;\n      pB = HALF;\n    }\n    m = 1;\n  }\n  if (colorSpace === 'xyz') {\n    colorSpace = 'xyz-d65';\n  }\n  // specified value\n  if (format === VAL_SPEC) {\n    let valueA, valueB;\n    if (colorA.startsWith(FN_MIX)) {\n      valueA = colorA;\n    } else if (colorA.startsWith(FN_COLOR)) {\n      valueA = parseColorFunc(colorA, opt);\n      if (Array.isArray(valueA)) {\n        const [v1, v2, v3, v4, v5] = [...valueA];\n        if (v5 === 1) {\n          valueA = `color(${v1} ${v2} ${v3} ${v4})`;\n        } else {\n          valueA = `color(${v1} ${v2} ${v3} ${v4} / ${v5})`;\n        }\n      }\n    } else {\n      valueA = parseColorValue(colorA, opt);\n      if (valueA === '') {\n        return valueA;\n      }\n      if (Array.isArray(valueA)) {\n        const [v1, v2, v3, v4, v5] = [...valueA];\n        if (v5 === 1) {\n          if (v1 === 'rgb') {\n            valueA = `${v1}(${v2}, ${v3}, ${v4})`;\n          } else {\n            valueA = `${v1}(${v2} ${v3} ${v4})`;\n          }\n        } else if (v1 === 'rgb') {\n          valueA = `${v1}a(${v2}, ${v3}, ${v4}, ${v5})`;\n        } else {\n          valueA = `${v1}(${v2} ${v3} ${v4} / ${v5})`;\n        }\n      }\n    }\n    if (colorB.startsWith(FN_MIX)) {\n      valueB = colorB;\n    } else if (colorB.startsWith(FN_COLOR)) {\n      valueB = parseColorFunc(colorB, opt);\n      if (Array.isArray(valueB)) {\n        const [v1, v2, v3, v4, v5] = [...valueB];\n        if (v5 === 1) {\n          valueB = `color(${v1} ${v2} ${v3} ${v4})`;\n        } else {\n          valueB = `color(${v1} ${v2} ${v3} ${v4} / ${v5})`;\n        }\n      }\n    } else {\n      valueB = parseColorValue(colorB, opt);\n      if (valueB === '') {\n        return valueB;\n      }\n      if (Array.isArray(valueB)) {\n        const [v1, v2, v3, v4, v5] = [...valueB];\n        if (v5 === 1) {\n          if (v1 === 'rgb') {\n            valueB = `${v1}(${v2}, ${v3}, ${v4})`;\n          } else {\n            valueB = `${v1}(${v2} ${v3} ${v4})`;\n          }\n        } else if (v1 === 'rgb') {\n          valueB = `${v1}a(${v2}, ${v3}, ${v4}, ${v5})`;\n        } else {\n          valueB = `${v1}(${v2} ${v3} ${v4} / ${v5})`;\n        }\n      }\n    }\n    if (pctA && pctB) {\n      valueA += ` ${parseFloat(pctA)}%`;\n      valueB += ` ${parseFloat(pctB)}%`;\n    } else if (pctA) {\n      const pA = parseFloat(pctA);\n      if (pA !== MAX_PCT * HALF) {\n        valueA += ` ${pA}%`;\n      }\n    } else if (pctB) {\n      const pA = MAX_PCT - parseFloat(pctB);\n      if (pA !== MAX_PCT * HALF) {\n        valueA += ` ${pA}%`;\n      }\n    }\n    if (hueArc) {\n      return `color-mix(in ${colorSpace} ${hueArc} hue, ${valueA}, ${valueB})`;\n    } else {\n      return `color-mix(in ${colorSpace}, ${valueA}, ${valueB})`;\n    }\n  }\n  let r, g, b, alpha;\n  // in srgb, srgb-linear\n  if (/^srgb(?:-linear)?$/.test(colorSpace)) {\n    let rgbA, rgbB;\n    if (colorSpace === 'srgb') {\n      if (REG_CURRENT.test(colorA)) {\n        rgbA = [NONE, NONE, NONE, NONE];\n      } else {\n        rgbA = convertColorToRgb(colorA, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n      if (REG_CURRENT.test(colorB)) {\n        rgbB = [NONE, NONE, NONE, NONE];\n      } else {\n        rgbB = convertColorToRgb(colorB, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n    } else {\n      if (REG_CURRENT.test(colorA)) {\n        rgbA = [NONE, NONE, NONE, NONE];\n      } else {\n        rgbA = convertColorToLinearRgb(colorA, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n      if (REG_CURRENT.test(colorB)) {\n        rgbB = [NONE, NONE, NONE, NONE];\n      } else {\n        rgbB = convertColorToLinearRgb(colorB, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n    }\n    if (rgbA === null || rgbB === null) {\n      return ['rgb', 0, 0, 0, 0];\n    }\n    let [rA, gA, bA, alphaA] = rgbA;\n    let [rB, gB, bB, alphaB] = rgbB;\n    const rNone = rA === NONE && rB === NONE;\n    const gNone = gA === NONE && gB === NONE;\n    const bNone = bA === NONE && bB === NONE;\n    const alphaNone = alphaA === NONE && alphaB === NONE;\n    [[rA, gA, bA, alphaA], [rB, gB, bB, alphaB]] =\n      normalizeColorComponents([rA, gA, bA, alphaA], [rB, gB, bB, alphaB],\n        true);\n    const factorA = alphaA * pA;\n    const factorB = alphaB * pB;\n    alpha = (factorA + factorB);\n    if (alpha === 0) {\n      r = rA * pA + rB * pB;\n      g = gA * pA + gB * pB;\n      b = bA * pA + bB * pB;\n    } else {\n      r = (rA * factorA + rB * factorB) / alpha;\n      g = (gA * factorA + gB * factorB) / alpha;\n      b = (bA * factorA + bB * factorB) / alpha;\n      alpha = parseFloat(alpha.toFixed(3));\n    }\n    if (format === VAL_COMP) {\n      return [\n        colorSpace,\n        rNone ? NONE : roundToPrecision(r, HEX),\n        gNone ? NONE : roundToPrecision(g, HEX),\n        bNone ? NONE : roundToPrecision(b, HEX),\n        alphaNone ? NONE : alpha * m\n      ];\n    }\n    r *= MAX_RGB;\n    g *= MAX_RGB;\n    b *= MAX_RGB;\n  // in xyz, xyz-d65, xyz-d50\n  } else if (REG_CS_XYZ.test(colorSpace)) {\n    let xyzA, xyzB;\n    if (REG_CURRENT.test(colorA)) {\n      xyzA = [NONE, NONE, NONE, NONE];\n    } else {\n      xyzA = convertColorToXyz(colorA, {\n        colorSpace,\n        d50: colorSpace === 'xyz-d50',\n        format: VAL_MIX\n      });\n    }\n    if (REG_CURRENT.test(colorB)) {\n      xyzB = [NONE, NONE, NONE, NONE];\n    } else {\n      xyzB = convertColorToXyz(colorB, {\n        colorSpace,\n        d50: colorSpace === 'xyz-d50',\n        format: VAL_MIX\n      });\n    }\n    if (xyzA === null || xyzB === null) {\n      return ['rgb', 0, 0, 0, 0];\n    }\n    let [xA, yA, zA, alphaA] = xyzA;\n    let [xB, yB, zB, alphaB] = xyzB;\n    const xNone = xA === NONE && xB === NONE;\n    const yNone = yA === NONE && yB === NONE;\n    const zNone = zA === NONE && zB === NONE;\n    const alphaNone = alphaA === NONE && alphaB === NONE;\n    [[xA, yA, zA, alphaA], [xB, yB, zB, alphaB]] =\n      normalizeColorComponents([xA, yA, zA, alphaA], [xB, yB, zB, alphaB],\n        true);\n    const factorA = alphaA * pA;\n    const factorB = alphaB * pB;\n    alpha = (factorA + factorB);\n    let x, y, z;\n    if (alpha === 0) {\n      x = xA * pA + xB * pB;\n      y = yA * pA + yB * pB;\n      z = zA * pA + zB * pB;\n    } else {\n      x = (xA * factorA + xB * factorB) / alpha;\n      y = (yA * factorA + yB * factorB) / alpha;\n      z = (zA * factorA + zB * factorB) / alpha;\n      alpha = parseFloat(alpha.toFixed(3));\n    }\n    if (format === VAL_COMP) {\n      return [\n        colorSpace,\n        xNone ? NONE : roundToPrecision(x, HEX),\n        yNone ? NONE : roundToPrecision(y, HEX),\n        zNone ? NONE : roundToPrecision(z, HEX),\n        alphaNone ? NONE : alpha * m\n      ];\n    }\n    if (colorSpace === 'xyz-d50') {\n      [r, g, b] = convertXyzD50ToRgb([x, y, z], true);\n    } else {\n      [r, g, b] = convertXyzToRgb([x, y, z], true);\n    }\n  // in hsl, hwb\n  } else if (/^h(?:sl|wb)$/.test(colorSpace)) {\n    let hslA, hslB;\n    if (colorSpace === 'hsl') {\n      if (REG_CURRENT.test(colorA)) {\n        hslA = [NONE, NONE, NONE, NONE];\n      } else {\n        hslA = convertColorToHsl(colorA, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n      if (REG_CURRENT.test(colorB)) {\n        hslB = [NONE, NONE, NONE, NONE];\n      } else {\n        hslB = convertColorToHsl(colorB, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n    } else {\n      if (REG_CURRENT.test(colorA)) {\n        hslA = [NONE, NONE, NONE, NONE];\n      } else {\n        hslA = convertColorToHwb(colorA, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n      if (REG_CURRENT.test(colorB)) {\n        hslB = [NONE, NONE, NONE, NONE];\n      } else {\n        hslB = convertColorToHwb(colorB, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n    }\n    if (hslA === null || hslB === null) {\n      return ['rgb', 0, 0, 0, 0];\n    }\n    let [hA, sA, lA, alphaA] = hslA;\n    let [hB, sB, lB, alphaB] = hslB;\n    const alphaNone = alphaA === NONE && alphaB === NONE;\n    [[hA, sA, lA, alphaA], [hB, sB, lB, alphaB]] =\n      normalizeColorComponents([hA, sA, lA, alphaA], [hB, sB, lB, alphaB],\n        true);\n    if (hueArc) {\n      [hA, hB] = interpolateHue(hA, hB, hueArc);\n    }\n    const factorA = alphaA * pA;\n    const factorB = alphaB * pB;\n    alpha = (factorA + factorB);\n    const h = (hA * pA + hB * pB) % DEG;\n    let s, l;\n    if (alpha === 0) {\n      s = sA * pA + sB * pB;\n      l = lA * pA + lB * pB;\n    } else {\n      s = (sA * factorA + sB * factorB) / alpha;\n      l = (lA * factorA + lB * factorB) / alpha;\n      alpha = parseFloat(alpha.toFixed(3));\n    }\n    [r, g, b] = convertColorToRgb(`${colorSpace}(${h} ${s} ${l})`);\n    if (format === VAL_COMP) {\n      return [\n        'srgb',\n        roundToPrecision(r / MAX_RGB, HEX),\n        roundToPrecision(g / MAX_RGB, HEX),\n        roundToPrecision(b / MAX_RGB, HEX),\n        alphaNone ? NONE : alpha * m\n      ];\n    }\n  // in lab, oklab\n  } else if (/^(?:ok)?lab$/.test(colorSpace)) {\n    let labA, labB;\n    if (colorSpace === 'lab') {\n      if (REG_CURRENT.test(colorA)) {\n        labA = [NONE, NONE, NONE, NONE];\n      } else {\n        labA = convertColorToLab(colorA, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n      if (REG_CURRENT.test(colorB)) {\n        labB = [NONE, NONE, NONE, NONE];\n      } else {\n        labB = convertColorToLab(colorB, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n    } else {\n      if (REG_CURRENT.test(colorA)) {\n        labA = [NONE, NONE, NONE, NONE];\n      } else {\n        labA = convertColorToOklab(colorA, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n      if (REG_CURRENT.test(colorB)) {\n        labB = [NONE, NONE, NONE, NONE];\n      } else {\n        labB = convertColorToOklab(colorB, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n    }\n    if (labA === null || labB === null) {\n      return ['rgb', 0, 0, 0, 0];\n    }\n    let [lA, aA, bA, alphaA] = labA;\n    let [lB, aB, bB, alphaB] = labB;\n    const lNone = lA === NONE && lB === NONE;\n    const aNone = aA === NONE && aB === NONE;\n    const bNone = bA === NONE && bB === NONE;\n    const alphaNone = alphaA === NONE && alphaB === NONE;\n    [[lA, aA, bA, alphaA], [lB, aB, bB, alphaB]] =\n      normalizeColorComponents([lA, aA, bA, alphaA], [lB, aB, bB, alphaB],\n        true);\n    const factorA = alphaA * pA;\n    const factorB = alphaB * pB;\n    alpha = (factorA + factorB);\n    let l, aO, bO;\n    if (alpha === 0) {\n      l = lA * pA + lB * pB;\n      aO = aA * pA + aB * pB;\n      bO = bA * pA + bB * pB;\n    } else {\n      l = (lA * factorA + lB * factorB) / alpha;\n      aO = (aA * factorA + aB * factorB) / alpha;\n      bO = (bA * factorA + bB * factorB) / alpha;\n      alpha = parseFloat(alpha.toFixed(3));\n    }\n    if (format === VAL_COMP) {\n      return [\n        colorSpace,\n        lNone ? NONE : roundToPrecision(l, HEX),\n        aNone ? NONE : roundToPrecision(aO, HEX),\n        bNone ? NONE : roundToPrecision(bO, HEX),\n        alphaNone ? NONE : alpha * m\n      ];\n    }\n    [, r, g, b] = resolveColorValue(`${colorSpace}(${l} ${aO} ${bO})`);\n  // in lch, oklch\n  } else if (/^(?:ok)?lch$/.test(colorSpace)) {\n    let lchA, lchB;\n    if (colorSpace === 'lch') {\n      if (REG_CURRENT.test(colorA)) {\n        lchA = [NONE, NONE, NONE, NONE];\n      } else {\n        lchA = convertColorToLch(colorA, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n      if (REG_CURRENT.test(colorB)) {\n        lchB = [NONE, NONE, NONE, NONE];\n      } else {\n        lchB = convertColorToLch(colorB, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n    } else {\n      if (REG_CURRENT.test(colorA)) {\n        lchA = [NONE, NONE, NONE, NONE];\n      } else {\n        lchA = convertColorToOklch(colorA, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n      if (REG_CURRENT.test(colorB)) {\n        lchB = [NONE, NONE, NONE, NONE];\n      } else {\n        lchB = convertColorToOklch(colorB, {\n          colorSpace,\n          format: VAL_MIX\n        });\n      }\n    }\n    if (lchA === null || lchB === null) {\n      return ['rgb', 0, 0, 0, 0];\n    }\n    let [lA, cA, hA, alphaA] = lchA;\n    let [lB, cB, hB, alphaB] = lchB;\n    const lNone = lA === NONE && lB === NONE;\n    const cNone = cA === NONE && cB === NONE;\n    const hNone = hA === NONE && hB === NONE;\n    const alphaNone = alphaA === NONE && alphaB === NONE;\n    [[lA, cA, hA, alphaA], [lB, cB, hB, alphaB]] =\n      normalizeColorComponents([lA, cA, hA, alphaA], [lB, cB, hB, alphaB],\n        true);\n    if (hueArc) {\n      [hA, hB] = interpolateHue(hA, hB, hueArc);\n    }\n    const factorA = alphaA * pA;\n    const factorB = alphaB * pB;\n    alpha = (factorA + factorB);\n    const h = (hA * pA + hB * pB) % DEG;\n    let l, c;\n    if (alpha === 0) {\n      l = lA * pA + lB * pB;\n      c = cA * pA + cB * pB;\n    } else {\n      l = (lA * factorA + lB * factorB) / alpha;\n      c = (cA * factorA + cB * factorB) / alpha;\n      alpha = parseFloat(alpha.toFixed(3));\n    }\n    if (format === VAL_COMP) {\n      return [\n        colorSpace,\n        lNone ? NONE : roundToPrecision(l, HEX),\n        cNone ? NONE : roundToPrecision(c, HEX),\n        hNone ? NONE : roundToPrecision(h, HEX),\n        alphaNone ? NONE : alpha * m\n      ];\n    }\n    [, r, g, b] = resolveColorValue(`${colorSpace}(${l} ${c} ${h})`);\n  }\n  return [\n    'rgb',\n    Math.round(r),\n    Math.round(g),\n    Math.round(b),\n    parseFloat((alpha * m).toFixed(3))\n  ];\n};\n"],"mappings":"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","names":["src_exports","__export","convert","cssCalc","isColor","resolve","__toCommonJS","import_lru_cache","isString","o","import_lru_cache","import_css_calc","import_css_tokenizer","import_lru_cache","VAL_COMP","VAL_SPEC","_DIGIT","_COMP","_STEP","_TRIG","_EXP","_SIGN","_MATH","_CALC","_VAR","ANGLE","NUM","NONE","PCT","SYN_FN_MATH","SYN_FN_MATH_CALC","SYN_FN_MATH_VAR","SYN_FN_VAR","_ALPHA","_ALPHA_LV3","_COLOR_FUNC","_COLOR_KEY","_CS_HUE","_CS_HUE_ARC","_NUM_ANGLE","_NUM_ANGLE_NONE","_NUM_PCT_NONE","CS_HUE","CS_HUE_CAPT","CS_LAB","CS_LCH","CS_SRGB","CS_RGB","CS_XYZ","CS_MIX","FN_COLOR","FN_MIX","FN_REL","FN_REL_CAPT","FN_VAR","SYN_FN_COLOR","SYN_FN_REL","SYN_HSL","SYN_HSL_LV3","SYN_LCH","SYN_MOD","SYN_RGB_LV3","SYN_COLOR_TYPE","SYN_MIX_PART","SYN_MIX","SYN_MIX_CAPT","PAREN_CLOSE","COMMENT","DIM","EOF","FUNC","PAREN_OPEN","W_SPACE","HEX","MAX_PCT","REG_FN_MATH_CALC","SYN_FN_MATH_CALC","REG_FN_VAR","SYN_FN_VAR","REG_OPERATOR","REG_START_MATH","SYN_FN_MATH","REG_START_MATH_VAR","SYN_FN_MATH_VAR","REG_TYPE_DIM","NUM","REG_TYPE_DIM_PCT","REG_TYPE_PCT","cachedResults","Calculator","#hasNum","#numSum","#numMul","#hasPct","#pctSum","#pctMul","#hasDim","#dimSum","#dimSub","#dimMul","#dimDiv","#hasEtc","#etcSum","#etcSub","#etcMul","#etcDiv","value","values","arr","a","b","res","valA","unitA","valB","unitB","num","dim","mul","div","sum","sub","item","sortCalcValues","finalize","start","end","sortedValues","cal","operator","i","l","sortedValue","val","resolvedValue","finalizedValues","serializeCalc","opt","format","isString","VAL_SPEC","cacheKey","valueToJsonString","items","token","type","v","startIndex","endIndex","index","slicedValues","serializedValue","serializedCalc","resolveDimension","detail","unit","relativeValue","dimension","pixelValue","parseTokens","tokens","mathFunc","nest","lastValue","cssCalc","FN_VAR","roundToPrecision","import_css_tokenizer","import_lru_cache","PAREN_CLOSE","COMMENT","EOF","IDENT","W_SPACE","REG_FN_MATH_CALC","SYN_FN_MATH_CALC","REG_FN_VAR","SYN_FN_VAR","cachedResults","resolveCustomProperty","tokens","opt","customProperty","items","token","type","value","FN_VAR","restTokens","item","resolveAsColor","lastValue","isColor","resolvedValue","cssVar","cssCalc","parseTokens","res","format","isString","VAL_SPEC","cacheKey","valueToJsonString","values","color","import_css_color_parser","import_css_parser_algorithms","import_css_tokenizer","import_lru_cache","PAREN_CLOSE","COMMENT","DIM","EOF","FUNC","IDENT","NUM","PAREN_OPEN","PCT","W_SPACE","NONE_KEY","OCT","DEC","HEX","MAX_PCT","MAX_RGB","REG_COLOR_CAPT","FN_REL","SYN_COLOR_TYPE","SYN_MIX","REG_CS_HSL","REG_CS_CIE","CS_LAB","CS_LCH","REG_FN_VAR","SYN_FN_VAR","REG_REL","REG_REL_CAPT","FN_REL_CAPT","REG_START_MATH","SYN_FN_MATH","REG_START_REL","cachedResults","resolveColorChannels","tokens","opt","colorSpace","format","colorChannel","mathFunc","channels","i","nest","func","token","type","value","detail","numValue","channel","resolvedValue","resolveDimension","lastValue","isString","channelValues","serializeCalc","extractOriginColor","currentColor","cacheKey","valueToJsonString","originColor","restValue","NAMED_COLORS","VAL_SPEC","resolvedOriginColor","resolve","channelValue","v1","v2","v3","v4","tokenValue","resolveRelativeColor","FN_VAR","components","parsedComponents","colorParser","alpha","colorNotation","syntaxFlags","NONE","roundToPrecision","r","g","colorToRgb","cs","RGB_TRANSPARENT","REG_FN_MATH_CALC","SYN_FN_MATH_CALC","REG_FN_REL","SYN_FN_REL","REG_FN_VAR","SYN_FN_VAR","cachedResults","resolve","color","opt","isString","currentColor","customProperty","format","VAL_COMP","key","cacheKey","valueToJsonString","res","cs","r","g","b","alpha","VAL_SPEC","cssVar","resolveRelativeColor","cssCalc","FN_MIX","resolveColorMix","FN_COLOR","resolveColorFunc","resolveColorValue","rgb","hex","convertRgbToHex","value","DEC","HEX","DEG","DEG_HALF","REG_COLOR","SYN_COLOR_TYPE","REG_MIX","SYN_MIX","isColor","value","isString","NAMED_COLORS","resolve","VAL_SPEC","valueToJsonString","func","key","val","replacedValue","roundToPrecision","bit","interpolateHue","hueA","hueB","arc","VAL_MIX","PPTH","HALF","DUO","TRIA","QUAT","OCT","DEC","DOZ","HEX","SEXA","DEG","MAX_PCT","MAX_RGB","POW_SQR","POW_CUBE","POW_LINEAR","LINEAR_COEF","LINEAR_OFFSET","LAB_L","LAB_A","LAB_B","LAB_EPSILON","LAB_KAPPA","D50","MATRIX_D50_TO_D65","MATRIX_D65_TO_D50","MATRIX_L_RGB_TO_XYZ","MATRIX_XYZ_TO_L_RGB","MATRIX_XYZ_TO_LMS","MATRIX_LMS_TO_XYZ","MATRIX_OKLAB_TO_LMS","MATRIX_LMS_TO_OKLAB","MATRIX_P3_TO_XYZ","MATRIX_REC2020_TO_XYZ","MATRIX_A98_TO_XYZ","MATRIX_PROPHOTO_TO_XYZ_D50","REG_COLOR","SYN_COLOR_TYPE","REG_CS_HUE","CS_HUE_CAPT","REG_CS_XYZ","REG_CURRENT","REG_FN_COLOR","SYN_FN_COLOR","REG_HSL","SYN_HSL","SYN_HSL_LV3","REG_HWB","REG_LAB","SYN_MOD","REG_LCH","SYN_LCH","REG_MIX","SYN_MIX","REG_MIX_CAPT","SYN_MIX_CAPT","REG_MIX_NEST","REG_OKLAB","REG_OKLCH","REG_SPEC","NAMED_COLORS","validateColorComponents","arr","opt","alpha","minLength","maxLength","minRange","maxRange","validateRange","l","i","v","transformMatrix","mtx","vct","skip","r1c1","r1c2","r1c3","r2c1","r2c2","r2c3","r3c1","r3c2","r3c3","v1","v2","v3","p1","p2","p3","normalizeColorComponents","colorA","colorB","NONE","numberToHexString","value","hex","angleToDeg","angle","isString","GRAD","RAD","reg","NUM","ANGLE","val","unit","deg","parseAlpha","parseHexAlpha","alphaMap","convertRgbToLinearRgb","rgb","rr","gg","bb","r","g","b","COND_POW","convertRgbToXyz","x","y","z","convertRgbToHex","rgb","r","g","b","alpha","validateColorComponents","MAX_RGB","rr","numberToHexString","gg","bb","aa","hex","convertLinearRgbToRgb","round","TRIA","COND_POW","POW_LINEAR","LINEAR_OFFSET","LINEAR_COEF","convertXyzToRgb","xyz","skip","x","y","z","alpha","validateColorComponents","r","g","b","transformMatrix","MATRIX_XYZ_TO_L_RGB","convertLinearRgbToRgb","convertXyzToHsl","xyz","skip","rr","gg","bb","alpha","convertXyzToRgb","r","MAX_RGB","g","b","max","min","d","l","HALF","MAX_PCT","h","s","NONE","DUO","QUAT","SEXA","DEG","convertXyzToHwb","w","bk","convertXyzToOklab","x","y","z","validateColorComponents","xyzLms","transformMatrix","MATRIX_XYZ_TO_LMS","c","a","MATRIX_LMS_TO_OKLAB","lPct","convertXyzToOklch","aa","POW_SQR","convertXyzD50ToRgb","xyzD65","MATRIX_D50_TO_D65","convertXyzD50ToLab","xyzD50","val","i","D50","f0","f1","f2","LAB_EPSILON","LAB_KAPPA","HEX","LAB_L","LAB_A","LAB_B","convertXyzD50ToLch","convertHexToRgb","value","isString","arr","parseHexAlpha","convertHexToLinearRgb","convertRgbToLinearRgb","convertHexToXyz","MATRIX_L_RGB_TO_XYZ","parseRgb","opt","format","reg","SYN_MOD","SYN_RGB_LV3","VAL_MIX","VAL_SPEC","v1","v2","v3","v4","roundToPrecision","OCT","parseAlpha","parseHsl","REG_HSL","angleToDeg","ll","sa","rk","DOZ","gk","TRIA","parseHwb","REG_HWB","v","factor","parseLab","REG_LAB","COEF_PCT","COND_POW","REG_SPEC","fl","fa","fb","powFl","POW_CUBE","powFa","powFb","parseLch","REG_LCH","parseOklab","REG_OKLAB","MATRIX_OKLAB_TO_LMS","MATRIX_LMS_TO_XYZ","parseOklch","REG_OKLCH","cl","parseColorFunc","colorSpace","d50","REG_FN_COLOR","cs","DEC","convertRgbToXyz","MATRIX_D65_TO_D50","linearRgb","MATRIX_P3_TO_XYZ","ALPHA","BETA","REC_COEF","rgb","MATRIX_REC2020_TO_XYZ","POW_A98","MATRIX_A98_TO_XYZ","MATRIX_PROPHOTO_TO_XYZ_D50","parseColorValue","REG_COLOR","REG_CURRENT","VAL_COMP","NAMED_COLORS","resolveColorValue","resolveColorFunc","convertColorToLinearRgb","FN_COLOR","MATRIX_XYZ_TO_L_RGB","convertColorToRgb","convertLinearRgbToRgb","convertColorToXyz","convertColorToHsl","convertColorToHwb","convertColorToLab","convertColorToLch","convertColorToOklab","convertColorToOklch","resolveColorMix","nestedItems","REG_MIX","FN_MIX","REG_MIX_NEST","regColorSpace","CS_RGB","CS_XYZ","items","item","v5","hueArc","colorA","pctA","colorB","pctB","CS_MIX","REG_CS_HUE","itemA","regA","PCT","itemB","regB","colorPart","SYN_COLOR_TYPE","itemPart","itemPartCapt","regColorPart","regItemPart","colorPartA","colorPartB","REG_MIX_CAPT","pA","pB","m","p1","p2","valueA","valueB","rgbA","rgbB","rA","gA","bA","alphaA","rB","gB","bB","alphaB","rNone","gNone","bNone","alphaNone","normalizeColorComponents","factorA","factorB","REG_CS_XYZ","xyzA","xyzB","xA","yA","zA","xB","yB","zB","xNone","yNone","zNone","hslA","hslB","hA","sA","lA","hB","sB","lB","interpolateHue","labA","labB","aA","aB","lNone","aNone","aO","bO","lchA","lchB","cA","cB","cNone","hNone","REG_FN_MATH_CALC","SYN_FN_MATH_CALC","REG_FN_REL","SYN_FN_REL","REG_FN_VAR","SYN_FN_VAR","cachedResults","preProcess","value","opt","isString","customProperty","cacheKey","valueToJsonString","cssVar","resolveRelativeColor","cssCalc","resolve","VAL_COMP","numberToHex","hex","numberToHexString","colorToHex","alpha","colorToHsl","hsl","convertColorToHsl","colorToHwb","hwb","convertColorToHwb","colorToLab","lab","convertColorToLab","colorToLch","lch","convertColorToLch","colorToOklab","convertColorToOklab","colorToOklch","convertColorToOklch","colorToRgb","rgb","convertColorToRgb","colorToXyz","xyz","parseColorFunc","parseColorValue","colorToXyzD50","convert"]}